// src/app/admin/products/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  Package, 
  Search, 
  Filter, 
  Plus, 
  Edit, 
  Trash2, 
  Eye,
  Loader2
} from "lucide-react";
import { toast } from "react-hot-toast";

interface Category {
  id: number;
  publicId: string;
  name: string;
}

interface ProductImage {
  id: number;
  url: string;
}

interface Product {
  id: number;
  publicId: string;
  name: string;
  description: string;
  price: number;
  stock: number;
  categoryId: number;
  category: Category;
  images: ProductImage[];
  createdAt: string;
  sku?: string | null;
  weight?: number | null;
}

export default function AdminProductsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [products, setProducts] = useState<Product[]>([]); // PASTIKAN ARRAY
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);

  // Fetch data
// src/app/admin/products/page.tsx (TAMBAH DEBUG INFO)
// Tambahkan ini di dalam useEffect fetchData:

useEffect(() => {
    const fetchData = async () => {
      try {
        console.log('Fetching categories and products...');
        
        // Fetch categories
        const categoriesRes = await fetch("/api/categories?type=PRODUCT");
        console.log('Categories response status:', categoriesRes.status);
        
        if (categoriesRes.ok) {
          const categoriesData = await categoriesRes.json();
          console.log('Categories data:', categoriesData);
          setCategories(Array.isArray(categoriesData) ? categoriesData : []);
        }
        
        // Fetch products
        const productsRes = await fetch("/api/products");
        console.log('Products response status:', productsRes.status);
        
        if (productsRes.ok) {
          const productsData = await productsRes.json();
          console.log('Products data:', productsData);
          console.log('First product publicId:', productsData[0]?.publicId);
          
          // PASTIKAN DATA ADALAH ARRAY
          setProducts(Array.isArray(productsData) ? productsData : []);
        } else {
          throw new Error("Failed to fetch products");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        toast.error("Gagal memuat data");
        // SET ARRAY KOSONG JIKA ERROR
        setProducts([]);
        setCategories([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // Fungsi pencarian dan filter - TAMBAH SAFETY CHECK
  const filteredProducts = Array.isArray(products) ? products.filter((product) => {
    const matchesSearch = 
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesCategory = 
      selectedCategory === null || product.category?.publicId === selectedCategory;
    
    return matchesSearch && matchesCategory;
  }) : [];

  // Handle hapus produk
  const handleDeleteProduct = async (publicId: string) => {
    if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/products/${publicId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus produk");
      }
      
      toast.success("Produk berhasil dihapus");
      
      // Update state to remove the product
      setProducts(prevProducts => 
        Array.isArray(prevProducts) 
          ? prevProducts.filter(product => product.publicId !== publicId)
          : []
      );
    } catch (error: any) {
      console.error("Error deleting product:", error);
      toast.error(error.message || "Gagal menghapus produk");
    } finally {
      setIsDeleting(false);
    }
  };

  // Fungsi pencarian
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Manajemen Produk</h1>
        <Link
          href="/admin/products/create"
          className="flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
        >
          <Plus size={18} className="mr-2" />
          Tambah Produk
        </Link>
      </div>

      {/* Search and Filter */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
          {/* Search Form */}
          <div className="lg:col-span-8">
            <form onSubmit={handleSearch} className="relative">
              <input
                type="text"
                name="search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Cari produk..."
                className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
              <button
                type="submit"
                className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
              >
                Cari
              </button>
            </form>
          </div>

          {/* Category Filter */}
          <div className="lg:col-span-4">
            <div className="relative">
              <select
                value={selectedCategory || ""}
                onChange={(e) => setSelectedCategory(e.target.value || null)}
                className="w-full py-2 pl-10 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent appearance-none"
              >
                <option value="">Semua Kategori</option>
                {Array.isArray(categories) && categories.map((category) => (
                  <option key={category.id} value={category.publicId}>
                    {category.name}
                  </option>
                ))}
              </select>
              <Filter className="absolute left-3 top-2.5 text-gray-400" size={18} />
            </div>
          </div>
        </div>
      </div>

      {/* Products Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : filteredProducts.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Produk
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Kategori
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Harga
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Stok
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tanggal Dibuat
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {filteredProducts.map((product) => (
                  <tr key={product.publicId}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gray-200 dark:bg-gray-700 rounded-md overflow-hidden">
                          {product.images && product.images.length > 0 ? (
                            <Image
                              src={product.images[0].url}
                              alt={product.name}
                              width={40}
                              height={40}
                              className="h-10 w-10 object-cover"
                            />
                          ) : (
                            <div className="h-10 w-10 flex items-center justify-center">
                              <Package size={20} className="text-gray-400" />
                            </div>
                          )}
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {product.name}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs">
                            {product.description}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200">
                        {product.category?.name || "Tidak ada kategori"}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      Rp {product.price.toLocaleString("id-ID")}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      {product.stock}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(product.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/products/view/${product.publicId}`}
                          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          title="Lihat Detail"
                        >
                          <Eye size={18} />
                        </Link>
                        <Link
                          href={`/admin/products/edit/${product.publicId}`}
                          className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                          title="Edit"
                        >
                          <Edit size={18} />
                        </Link>
                        <button
                          onClick={() => handleDeleteProduct(product.publicId)}
                          disabled={isDeleting}
                          className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50"
                          title="Hapus"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <Package size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Produk</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              {searchQuery
                ? `Tidak ada produk yang sesuai dengan pencarian "${searchQuery}"`
                : "Tidak ada produk yang tersedia"}
            </p>
            <Link
              href="/admin/products/create"
              className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
            >
              <Plus size={18} className="mr-2" />
              Tambah Produk Baru
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

// src/app/admin/products/view/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { ArrowLeft, Edit, Loader2, Package, Trash2 } from "lucide-react";
import { toast } from "react-hot-toast";

interface Category {
  id: number;
  publicId: string;
  name: string;
}

interface ProductImage {
  id: number;
  url: string;
}

interface Product {
  id: number;
  publicId: string;
  name: string;
  description: string;
  price: number;
  stock: number;
  categoryId: number;
  sku: string | null;
  weight: number | null;
  category: Category;
  images: ProductImage[];
  createdAt: string;
  updatedAt: string;
}

export default function ViewProductPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [product, setProduct] = useState<Product | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);
  const [activeImageIndex, setActiveImageIndex] = useState(0);
  const productPublicId = params.id;

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        console.log('Fetching product with publicId:', productPublicId);
        
        // Coba dengan endpoint yang benar
        const response = await fetch(`/api/products/${productPublicId}`);
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error("Produk tidak ditemukan");
          }
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('Product data:', data);
        setProduct(data);
      } catch (error) {
        console.error("Error fetching product:", error);
        toast.error("Gagal memuat data produk: " + (error as Error).message);
      } finally {
        setIsLoading(false);
      }
    };

    if (productPublicId) {
      fetchProduct();
    }
  }, [productPublicId]);

  const handleDeleteProduct = async () => {
    if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/products/${productPublicId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus produk");
      }
      
      toast.success("Produk berhasil dihapus");
      router.push('/admin/products');
    } catch (error: any) {
      console.error("Error deleting product:", error);
      toast.error(error.message || "Gagal menghapus produk");
    } finally {
      setIsDeleting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
        <span className="ml-2">Memuat data produk...</span>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
        <h2 className="text-xl font-semibold text-red-600 mb-2">Produk tidak ditemukan</h2>
        <p className="text-gray-600 dark:text-gray-400 mb-4">
          Produk dengan ID "{productPublicId}" tidak ditemukan atau telah dihapus.
        </p>
        <Link
          href="/admin/products"
          className="inline-flex items-center px-4 py-2 bg-primary-600 rounded-md text-white hover:bg-primary-700"
        >
          <ArrowLeft size={16} className="mr-2" />
          Kembali ke Daftar Produk
        </Link>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href="/admin/products"
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <h1 className="text-2xl font-bold">Detail Produk</h1>
        </div>
        <div className="flex space-x-2">
          <Link
            href={`/admin/products/edit/${product.publicId}`}
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            <Edit size={16} className="mr-2" />
            Edit
          </Link>
          <button
            onClick={handleDeleteProduct}
            disabled={isDeleting}
            className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isDeleting ? (
              <>
                <Loader2 size={16} className="mr-2 animate-spin" />
                Menghapus...
              </>
            ) : (
              <>
                <Trash2 size={16} className="mr-2" />
                Hapus
              </>
            )}
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Images */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <h2 className="text-lg font-semibold mb-4">Gambar Produk</h2>
            
            {product.images && product.images.length > 0 ? (
              <div className="space-y-4">
                {/* Main image */}
                <div className="h-64 w-full bg-gray-200 dark:bg-gray-700 rounded-md overflow-hidden">
                  <Image
                    src={product.images[activeImageIndex].url}
                    alt={product.name}
                    width={500}
                    height={500}
                    className="w-full h-full object-contain"
                  />
                </div>
                
                {/* Image thumbnails */}
                {product.images.length > 1 && (
                  <div className="grid grid-cols-5 gap-2">
                    {product.images.map((image, index) => (
                      <div 
                        key={image.id} 
                        className={`h-16 bg-gray-200 dark:bg-gray-700 rounded-md overflow-hidden cursor-pointer border-2 ${
                          activeImageIndex === index 
                            ? 'border-primary-500' 
                            : 'border-transparent'
                        }`}
                        onClick={() => setActiveImageIndex(index)}
                      >
                        <Image
                          src={image.url}
                          alt={`${product.name} thumbnail`}
                          width={100}
                          height={100}
                          className="w-full h-full object-cover"
                        />
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ) : (
              <div className="h-64 flex items-center justify-center bg-gray-200 dark:bg-gray-700 rounded-md">
                <Package size={64} className="text-gray-400" />
              </div>
            )}
          </div>
        </div>

        {/* Product Info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Basic Info */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-semibold mb-4">Informasi Produk</h2>
            
            <div className="space-y-4">
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Nama Produk</p>
                <p className="text-lg font-medium">{product.name}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Kategori</p>
                <p className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200">
                  {product.category?.name || "Tidak ada kategori"}
                </p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Deskripsi</p>
                <div className="text-gray-700 dark:text-gray-300 prose dark:prose-invert">
                  {product.description.split('\n').map((paragraph, idx) => (
                    <p key={idx}>{paragraph}</p>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          {/* Pricing & Inventory */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-semibold mb-4">Harga & Inventori</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Harga</p>
                <p className="text-2xl font-bold text-primary-600 dark:text-primary-400">
                  Rp {product.price.toLocaleString("id-ID")}
                </p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Stok</p>
                <p className="text-xl font-semibold">
                  {product.stock} unit
                  {product.stock <= 5 && (
                    <span className="ml-2 text-sm text-amber-600 dark:text-amber-400">
                      (Stok menipis)
                    </span>
                  )}
                </p>
              </div>
              
              {product.sku && (
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">SKU</p>
                  <p>{product.sku}</p>
                </div>
              )}
              
              {product.weight && (
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Berat</p>
                  <p>
                    {product.weight >= 1000000 
                      ? `${(product.weight / 1000000).toFixed(2)} ton`
                      : product.weight >= 1000 
                        ? `${(product.weight / 1000).toFixed(2)} kg`
                        : `${product.weight} gram`
                    }
                  </p>
                </div>
              )}
            </div>
          </div>
          
          {/* Additional Info */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-semibold mb-4">Informasi Tambahan</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Status</p>
                <p className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
                  Aktif
                </p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Tanggal Dibuat</p>
                <p>{new Date(product.createdAt).toLocaleDateString("id-ID", {
                  day: "numeric",
                  month: "long", 
                  year: "numeric",
                })}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Terakhir Diupdate</p>
                <p>{new Date(product.updatedAt).toLocaleDateString("id-ID", {
                  day: "numeric",
                  month: "long",
                  year: "numeric",
                })}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Total Gambar</p>
                <p>{product.images?.length || 0} gambar</p>
              </div>
            </div>
          </div>
          
          {/* Action Buttons */}
          <div className="flex justify-end space-x-3">
            <Link
              href="/admin/products"
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Kembali ke Daftar
            </Link>
            <Link
              href={`/admin/products/edit/${product.publicId}`}
              className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
            >
              Edit Produk
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

// src/app/admin/products/edit/[id]/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { toast } from "react-hot-toast";
import { ArrowLeft, Save, Upload, X, Loader2 } from "lucide-react";

interface Category {
  id: number;
  publicId: string;
  name: string;
}

interface ProductImage {
  id: number;
  url: string;
}

interface Product {
  id: number;
  publicId: string;
  name: string;
  description: string;
  price: number;
  stock: number;
  categoryId: number;
  sku: string | null;
  weight: number | null;
  category: Category;
  images: ProductImage[];
}

export default function EditProductPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [product, setProduct] = useState<Product | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);
  const [imagesToDelete, setImagesToDelete] = useState<number[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [weightUnit, setWeightUnit] = useState<string>("gram");
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Helper function untuk konversi berat dari gram ke unit yang dipilih
  const convertWeightFromGrams = (weightInGrams: number, unit: string) => {
    switch (unit) {
      case 'kg':
        return weightInGrams / 1000;
      case 'ton':
        return weightInGrams / 1000000;
      case 'gram':
      default:
        return weightInGrams;
    }
  };

  // Helper function untuk detect unit yang tepat dari berat gram
  const detectWeightUnit = (weightInGrams: number) => {
    if (weightInGrams >= 1000000) return 'ton';
    if (weightInGrams >= 1000) return 'kg';
    return 'gram';
  };

  // Fetch product and categories
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch product details menggunakan params.id
        const productRes = await fetch(`/api/products/${params.id}`);
        if (!productRes.ok) {
          throw new Error("Produk tidak ditemukan");
        }
        const productData = await productRes.json();

        // Fetch categories
        const categoriesRes = await fetch("/api/categories");
        const categoriesData = await categoriesRes.json();

        setProduct(productData);
        // Filter hanya kategori PRODUCT
        setCategories(categoriesData.filter((cat: any) => cat.type === 'PRODUCT'));
        
        // Set unit berat yang sesuai
        if (productData.weight) {
          const unit = detectWeightUnit(productData.weight);
          setWeightUnit(unit);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        toast.error("Gagal memuat data");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [params.id]);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newFiles = Array.from(e.target.files);
      
      // Validasi ukuran file (max 2MB)
      const oversizedFiles = newFiles.filter(file => file.size > 2 * 1024 * 1024);
      if (oversizedFiles.length > 0) {
        toast.error("Beberapa file melebihi batas ukuran 2MB");
        return;
      }
      
      // Validasi tipe file
      const invalidTypeFiles = newFiles.filter(file => {
        const fileType = file.type.toLowerCase();
        return !fileType.includes('jpeg') && !fileType.includes('jpg') && !fileType.includes('png') && !fileType.includes('webp');
      });
      
      if (invalidTypeFiles.length > 0) {
        toast.error("Hanya file JPG, PNG, dan WEBP yang diperbolehkan");
        return;
      }
      
      // Validasi jumlah total file
      if ((product?.images.length || 0) - imagesToDelete.length + images.length + newFiles.length > 5) {
        toast.error("Maksimal 5 gambar yang diperbolehkan");
        return;
      }
      
      setImages([...images, ...newFiles]);

      // Create preview URLs
      const newPreviewUrls = newFiles.map(file => URL.createObjectURL(file));
      setImagePreviewUrls([...imagePreviewUrls, ...newPreviewUrls]);
    }
  };

  const removeNewImage = (index: number) => {
    const newImages = [...images];
    newImages.splice(index, 1);
    setImages(newImages);

    const newPreviewUrls = [...imagePreviewUrls];
    URL.revokeObjectURL(newPreviewUrls[index]); // Release object URL
    newPreviewUrls.splice(index, 1);
    setImagePreviewUrls(newPreviewUrls);
  };

  const toggleDeleteExistingImage = (imageId: number) => {
    if (imagesToDelete.includes(imageId)) {
      setImagesToDelete(imagesToDelete.filter(id => id !== imageId));
    } else {
      setImagesToDelete([...imagesToDelete, imageId]);
    }
  };

  const isImageMarkedForDeletion = (imageId: number) => {
    return imagesToDelete.includes(imageId);
  };

  const validateForm = (formData: FormData) => {
    const newErrors: Record<string, string> = {};
    
    // Required fields
    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    const price = formData.get("price") as string;
    const stock = formData.get("stock") as string;
    const categoryId = formData.get("categoryId") as string;
    
    if (!name || name.trim() === "") newErrors.name = "Nama produk wajib diisi";
    if (!description || description.trim() === "") newErrors.description = "Deskripsi wajib diisi";
    if (!price || isNaN(parseFloat(price))) newErrors.price = "Harga wajib diisi dengan angka";
    if (!stock || isNaN(parseInt(stock))) newErrors.stock = "Stok wajib diisi dengan angka";
    if (!categoryId || categoryId === "") newErrors.categoryId = "Kategori wajib dipilih";
    
    // Weight validation (optional but must be number if provided)
    const weight = formData.get("weight") as string;
    if (weight && weight.trim() !== "" && isNaN(parseFloat(weight))) {
      newErrors.weight = "Berat harus berupa angka";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const form = e.currentTarget;
    const formData = new FormData(form);
    
    // Validate form
    if (!validateForm(formData)) {
      toast.error("Silakan periksa kembali data yang diinput");
      return;
    }
    
    setIsSubmitting(true);

    try {
      // Add images to delete
      if (imagesToDelete.length > 0) {
        formData.append("deleteImages", JSON.stringify(imagesToDelete));
      }
      
      // Add new images
      formData.delete("images"); // Clear existing images field from form
      images.forEach(image => {
        formData.append('images', image);
      });
      
      // Call API to update product menggunakan params.id
      const response = await fetch(`/api/products/${params.id}`, {
        method: 'PUT',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Gagal mengupdate produk');
      }
      
      toast.success("Produk berhasil diupdate");
      router.push(`/admin/products/view/${params.id}`);
    } catch (error: any) {
      console.error("Error updating product:", error);
      toast.error(error.message || "Gagal mengupdate produk");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  if (!product) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
        <h2 className="text-xl font-semibold text-red-600 mb-2">Produk tidak ditemukan</h2>
        <p className="text-gray-600 dark:text-gray-400 mb-4">
          Produk yang Anda cari tidak ditemukan atau telah dihapus.
        </p>
        <Link
          href="/admin/products"
          className="inline-flex items-center px-4 py-2 bg-primary-600 rounded-md text-white"
        >
          <ArrowLeft size={16} className="mr-2" />
          Kembali ke Daftar Produk
        </Link>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href={`/admin/products/view/${params.id}`}
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <h1 className="text-2xl font-bold">Edit Produk</h1>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Info Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Informasi Dasar
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="name" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Nama Produk *
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  defaultValue={product.name}
                  className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="categoryId" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Kategori *
                </label>
                <select
                  id="categoryId"
                  name="categoryId"
                  required
                  defaultValue={product.categoryId}
                  className={`w-full px-3 py-2 border ${errors.categoryId ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                >
                  <option value="">Pilih Kategori</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                {errors.categoryId && (
                  <p className="mt-1 text-sm text-red-500">{errors.categoryId}</p>
                )}
              </div>
            </div>
            
            <div>
              <label 
                htmlFor="description" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Deskripsi *
              </label>
              <textarea
                id="description"
                name="description"
                rows={4}
                required
                defaultValue={product.description}
                className={`w-full px-3 py-2 border ${errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
              ></textarea>
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>
          </div>
          
          {/* Pricing & Inventory Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Harga & Inventori
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="price" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Harga (Rp) *
                </label>
                <input
                  type="number"
                  id="price"
                  name="price"
                  required
                  min="0"
                  step="1000"
                  defaultValue={product.price}
                  className={`w-full px-3 py-2 border ${errors.price ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                />
                {errors.price && (
                  <p className="mt-1 text-sm text-red-500">{errors.price}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="stock" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Stok *
                </label>
                <input
                  type="number"
                  id="stock"
                  name="stock"
                  required
                  min="0"
                  defaultValue={product.stock}
                  className={`w-full px-3 py-2 border ${errors.stock ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                />
                {errors.stock && (
                  <p className="mt-1 text-sm text-red-500">{errors.stock}</p>
                )}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="sku" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  SKU
                </label>
                <input
                  type="text"
                  id="sku"
                  name="sku"
                  defaultValue={product.sku || ""}
                  className={`w-full px-3 py-2 border ${errors.sku ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                />
                {errors.sku && (
                  <p className="mt-1 text-sm text-red-500">{errors.sku}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="weight" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Berat
                </label>
                <div className="grid grid-cols-2 gap-2">
                  <input
                    type="number"
                    id="weight"
                    name="weight"
                    min="0"
                    step="0.01"
                    defaultValue={product.weight ? convertWeightFromGrams(product.weight, weightUnit) : ""}
                    className={`w-full px-3 py-2 border ${errors.weight ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  />
                  <select
                    name="weightUnit"
                    value={weightUnit}
                    onChange={(e) => setWeightUnit(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="gram">Gram</option>
                    <option value="kg">Kilogram</option>
                    <option value="ton">Ton</option>
                  </select>
                </div>
                {errors.weight && (
                  <p className="mt-1 text-sm text-red-500">{errors.weight}</p>
                )}
                <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  Berat saat ini: {product.weight ? 
                    `${product.weight >= 1000000 
                      ? `${(product.weight / 1000000).toFixed(2)} ton`
                      : product.weight >= 1000 
                        ? `${(product.weight / 1000).toFixed(2)} kg`
                        : `${product.weight} gram`
                    }` : 'Belum diset'} (disimpan dalam gram)
                </p>
              </div>
            </div>
          </div>
          
          {/* Images Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Gambar Produk
            </h2>
            
            <div className="space-y-4">
              {/* Existing Images */}
              {product.images && product.images.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Gambar yang Ada
                  </label>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                    {product.images.map((image) => (
                      <div key={image.id} className="relative group">
                        <div className={`h-32 rounded-md overflow-hidden bg-gray-200 dark:bg-gray-700 ${
                          isImageMarkedForDeletion(image.id) ? 'opacity-30' : ''
                        }`}>
                          <Image
                            src={image.url}
                            alt={`Product ${product.name}`}
                            width={150}
                            height={150}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <button
                          type="button"
                          onClick={() => toggleDeleteExistingImage(image.id)}
                          className={`absolute -top-2 -right-2 p-1 rounded-full ${
                            isImageMarkedForDeletion(image.id) 
                              ? 'bg-green-500 hover:bg-green-600' 
                              : 'bg-red-500 hover:bg-red-600'
                          } text-white`}
                          title={isImageMarkedForDeletion(image.id) ? "Batalkan hapus" : "Hapus gambar"}
                        >
                          {isImageMarkedForDeletion(image.id) ? "+" : <X size={16} />}
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* New Images */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Tambah Gambar Baru {images.length > 0 && `(${images.length})`}
                </label>
                
                {/* Image previews */}
                {imagePreviewUrls.length > 0 && (
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-4">
                    {imagePreviewUrls.map((url, index) => (
                      <div key={index} className="relative group">
                        <div className="h-32 rounded-md overflow-hidden bg-gray-200 dark:bg-gray-700">
                          <img 
                            src={url} 
                            alt={`Preview ${index + 1}`} 
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <button
                          type="button"
                          onClick={() => removeNewImage(index)}
                          className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                
                {/* Upload button */}
                <div className="flex items-center justify-center w-full">
                  <label
                    htmlFor="productImages"
                    className={`flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-md dark:border-gray-700 cursor-pointer bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                      (product.images.length - imagesToDelete.length + images.length) >= 5 ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                  >
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <Upload className="w-8 h-8 mb-3 text-gray-400" />
                      <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                        <span className="font-semibold">Klik untuk upload</span> atau drag and drop
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        PNG, JPG atau WEBP (max. 2MB)
                      </p>
                    </div>
                    <input
                      id="productImages"
                      type="file"
                      multiple
                      accept="image/*"
                      className="hidden"
                      onChange={handleImageChange}
                      disabled={(product.images.length - imagesToDelete.length + images.length) >= 5}
                    />
                  </label>
                </div>
                
                {(product.images.length - imagesToDelete.length + images.length) >= 5 && (
                  <p className="text-xs text-amber-500 dark:text-amber-400 mt-2">
                    Batas maksimum 5 gambar telah tercapai. Hapus beberapa gambar untuk menambahkan yang baru.
                  </p>
                )}
              </div>
            </div>
          </div>
          
          {/* Submit Buttons */}
          <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Link
              href={`/admin/products/view/${params.id}`}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
            >
              Batal
            </Link>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <>
                  <Loader2 size={18} className="mr-2 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save size={18} className="mr-2" />
                  Simpan Perubahan
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// src/app/admin/products/create/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { toast } from "react-hot-toast";
import { ArrowLeft, Save, Upload, X, Loader2 } from "lucide-react";

interface Category {
  id: number;
  publicId: string;
  name: string;
}


export default function CreateProductPage() {
  const router = useRouter();
  const [categories, setCategories] = useState<Category[]>([]);
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Fetch categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch("/api/categories?type=PRODUCT");
        if (response.ok) {
          const data = await response.json();
          setCategories(Array.isArray(data) ? data : []);
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
        toast.error("Gagal memuat kategori");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCategories();
  }, []);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newFiles = Array.from(e.target.files);
      
      // Validasi ukuran file (max 2MB)
      const oversizedFiles = newFiles.filter(file => file.size > 2 * 1024 * 1024);
      if (oversizedFiles.length > 0) {
        toast.error("Beberapa file melebihi batas ukuran 2MB");
        return;
      }
      
      // Validasi tipe file
      const invalidTypeFiles = newFiles.filter(file => {
        const fileType = file.type.toLowerCase();
        return !fileType.includes('jpeg') && !fileType.includes('jpg') && !fileType.includes('png') && !fileType.includes('webp');
      });
      
      if (invalidTypeFiles.length > 0) {
        toast.error("Hanya file JPG, PNG, dan WEBP yang diperbolehkan");
        return;
      }
      
      // Validasi jumlah total file
      if (images.length + newFiles.length > 5) {
        toast.error("Maksimal 5 gambar yang diperbolehkan");
        return;
      }
      
      setImages([...images, ...newFiles]);

      // Create preview URLs
      const newPreviewUrls = newFiles.map(file => URL.createObjectURL(file));
      setImagePreviewUrls([...imagePreviewUrls, ...newPreviewUrls]);
    }
  };

  const removeImage = (index: number) => {
    const newImages = [...images];
    newImages.splice(index, 1);
    setImages(newImages);

    const newPreviewUrls = [...imagePreviewUrls];
    URL.revokeObjectURL(newPreviewUrls[index]); // Release object URL
    newPreviewUrls.splice(index, 1);
    setImagePreviewUrls(newPreviewUrls);
  };

  const validateForm = (formData: FormData) => {
    const newErrors: Record<string, string> = {};
    
    // Required fields
    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    const price = formData.get("price") as string;
    const stock = formData.get("stock") as string;
    const categoryId = formData.get("categoryId") as string;
    
    if (!name || name.trim() === "") newErrors.name = "Nama produk wajib diisi";
    if (!description || description.trim() === "") newErrors.description = "Deskripsi wajib diisi";
    if (!price || isNaN(parseFloat(price))) newErrors.price = "Harga wajib diisi dengan angka";
    if (!stock || isNaN(parseInt(stock))) newErrors.stock = "Stok wajib diisi dengan angka";
    if (!categoryId || categoryId === "") newErrors.categoryId = "Kategori wajib dipilih";
    
    // Weight validation (optional but must be number if provided)
    const weight = formData.get("weight") as string;
    if (weight && weight.trim() !== "" && isNaN(parseInt(weight))) {
      newErrors.weight = "Berat harus berupa angka";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const form = e.currentTarget;
    const formData = new FormData(form);
    
    // Validate form
    if (!validateForm(formData)) {
      toast.error("Silakan periksa kembali data yang diinput");
      return;
    }
    
    setIsSubmitting(true);

    try {
      // Add images
      images.forEach(image => {
        formData.append('images', image);
      });
      
      // Call API to create product
      const response = await fetch('/api/products', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Gagal membuat produk');
      }
      
      const newProduct = await response.json();
      toast.success("Produk berhasil dibuat");
      router.push(`/admin/products/view/${newProduct.publicId}`);
    } catch (error: any) {
      console.error("Error creating product:", error);
      toast.error(error.message || "Gagal membuat produk");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href="/admin/products"
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <h1 className="text-2xl font-bold">Tambah Produk Baru</h1>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Info Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Informasi Dasar
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="name" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Nama Produk *
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="Masukkan nama produk"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="categoryId" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Kategori *
                </label>
                <select
                  id="categoryId"
                  name="categoryId"
                  required
                  className={`w-full px-3 py-2 border ${errors.categoryId ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                >
                  <option value="">Pilih Kategori</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                {errors.categoryId && (
                  <p className="mt-1 text-sm text-red-500">{errors.categoryId}</p>
                )}
                {categories.length === 0 && (
                  <p className="mt-1 text-sm text-amber-600">
                    Belum ada kategori produk. 
                    <Link href="/admin/categories/products/create" className="text-primary-600 hover:text-primary-700 ml-1">
                      Buat kategori baru
                    </Link>
                  </p>
                )}
              </div>
            </div>
            
            <div>
              <label 
                htmlFor="description" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Deskripsi *
              </label>
              <textarea
                id="description"
                name="description"
                rows={4}
                required
                className={`w-full px-3 py-2 border ${errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Jelaskan detail produk Anda"
              ></textarea>
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>
          </div>
          
          {/* Pricing & Inventory Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Harga & Inventori
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="price" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Harga (Rp) *
                </label>
                <input
                  type="number"
                  id="price"
                  name="price"
                  required
                  min="0"
                  step="1000"
                  className={`w-full px-3 py-2 border ${errors.price ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="150000"
                />
                {errors.price && (
                  <p className="mt-1 text-sm text-red-500">{errors.price}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="stock" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Stok *
                </label>
                <input
                  type="number"
                  id="stock"
                  name="stock"
                  required
                  min="0"
                  className={`w-full px-3 py-2 border ${errors.stock ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="10"
                />
                {errors.stock && (
                  <p className="mt-1 text-sm text-red-500">{errors.stock}</p>
                )}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="sku" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  SKU
                </label>
                <input
                  type="text"
                  id="sku"
                  name="sku"
                  className={`w-full px-3 py-2 border ${errors.sku ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="BRG-001"
                />
                {errors.sku && (
                  <p className="mt-1 text-sm text-red-500">{errors.sku}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="weight" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Berat
                </label>
                <div className="grid grid-cols-2 gap-2">
                  <input
                    type="number"
                    id="weight"
                    name="weight"
                    min="0"
                    step="0.01"
                    className={`w-full px-3 py-2 border ${errors.weight ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                    placeholder="500"
                  />
                  <select
                    name="weightUnit"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="gram">Gram</option>
                    <option value="kg">Kilogram</option>
                    <option value="ton">Ton</option>
                  </select>
                </div>
                {errors.weight && (
                  <p className="mt-1 text-sm text-red-500">{errors.weight}</p>
                )}
                <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  Berat akan disimpan dalam gram untuk perhitungan sistem
                </p>
              </div>
            </div>
          </div>
          
          {/* Images Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Gambar Produk
            </h2>
            
            <div className="space-y-4">
              {/* Image previews */}
              {imagePreviewUrls.length > 0 && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-4">
                  {imagePreviewUrls.map((url, index) => (
                    <div key={index} className="relative group">
                      <div className="h-32 rounded-md overflow-hidden bg-gray-200 dark:bg-gray-700">
                        <img 
                          src={url} 
                          alt={`Preview ${index + 1}`} 
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <button
                        type="button"
                        onClick={() => removeImage(index)}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        <X size={16} />
                      </button>
                    </div>
                  ))}
                </div>
              )}
              
              {/* Upload button */}
              <div className="flex items-center justify-center w-full">
                <label
                  htmlFor="productImages"
                  className={`flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-md dark:border-gray-700 cursor-pointer bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                    images.length >= 5 ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <Upload className="w-8 h-8 mb-3 text-gray-400" />
                    <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                      <span className="font-semibold">Klik untuk upload</span> atau drag and drop
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      PNG, JPG atau WEBP (max. 2MB, maksimal 5 gambar)
                    </p>
                  </div>
                  <input
                    id="productImages"
                    type="file"
                    multiple
                    accept="image/*"
                    className="hidden"
                    onChange={handleImageChange}
                    disabled={images.length >= 5}
                  />
                </label>
              </div>
              
              {images.length >= 5 && (
                <p className="text-xs text-amber-500 dark:text-amber-400 mt-2">
                  Batas maksimum 5 gambar telah tercapai.
                </p>
              )}
            </div>
          </div>
          
          {/* Submit Buttons */}
          <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Link
              href="/admin/products"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
            >
              Batal
            </Link>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <>
                  <Loader2 size={18} className="mr-2 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save size={18} className="mr-2" />
                  Simpan Produk
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// src/app/admin/products/create/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { toast } from "react-hot-toast";
import { ArrowLeft, Save, Upload, X, Loader2 } from "lucide-react";

interface Category {
  id: number;
  publicId: string;
  name: string;
}

export default function CreateProductPage() {
  const router = useRouter();
  const [categories, setCategories] = useState<Category[]>([]);
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Fetch categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch("/api/categories?type=PRODUCT");
        if (response.ok) {
          const data = await response.json();
          setCategories(Array.isArray(data) ? data : []);
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
        toast.error("Gagal memuat kategori");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCategories();
  }, []);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newFiles = Array.from(e.target.files);
      
      // Validasi ukuran file (max 2MB)
      const oversizedFiles = newFiles.filter(file => file.size > 2 * 1024 * 1024);
      if (oversizedFiles.length > 0) {
        toast.error("Beberapa file melebihi batas ukuran 2MB");
        return;
      }
      
      // Validasi tipe file
      const invalidTypeFiles = newFiles.filter(file => {
        const fileType = file.type.toLowerCase();
        return !fileType.includes('jpeg') && !fileType.includes('jpg') && !fileType.includes('png') && !fileType.includes('webp');
      });
      
      if (invalidTypeFiles.length > 0) {
        toast.error("Hanya file JPG, PNG, dan WEBP yang diperbolehkan");
        return;
      }
      
      // Validasi jumlah total file
      if (images.length + newFiles.length > 5) {
        toast.error("Maksimal 5 gambar yang diperbolehkan");
        return;
      }
      
      setImages([...images, ...newFiles]);

      // Create preview URLs
      const newPreviewUrls = newFiles.map(file => URL.createObjectURL(file));
      setImagePreviewUrls([...imagePreviewUrls, ...newPreviewUrls]);
    }
  };

  const removeImage = (index: number) => {
    const newImages = [...images];
    newImages.splice(index, 1);
    setImages(newImages);

    const newPreviewUrls = [...imagePreviewUrls];
    URL.revokeObjectURL(newPreviewUrls[index]); // Release object URL
    newPreviewUrls.splice(index, 1);
    setImagePreviewUrls(newPreviewUrls);
  };

  const validateForm = (formData: FormData) => {
    const newErrors: Record<string, string> = {};
    
    // Required fields
    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    const price = formData.get("price") as string;
    const stock = formData.get("stock") as string;
    const categoryId = formData.get("categoryId") as string;
    
    if (!name || name.trim() === "") newErrors.name = "Nama produk wajib diisi";
    if (!description || description.trim() === "") newErrors.description = "Deskripsi wajib diisi";
    if (!price || isNaN(parseFloat(price))) newErrors.price = "Harga wajib diisi dengan angka";
    if (!stock || isNaN(parseInt(stock))) newErrors.stock = "Stok wajib diisi dengan angka";
    if (!categoryId || categoryId === "") newErrors.categoryId = "Kategori wajib dipilih";
    
    // Weight validation (optional but must be number if provided)
    const weight = formData.get("weight") as string;
    if (weight && weight.trim() !== "" && isNaN(parseInt(weight))) {
      newErrors.weight = "Berat harus berupa angka";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const form = e.currentTarget;
    const formData = new FormData(form);
    
    // Validate form
    if (!validateForm(formData)) {
      toast.error("Silakan periksa kembali data yang diinput");
      return;
    }
    
    setIsSubmitting(true);

    try {
      // Add images
      images.forEach(image => {
        formData.append('images', image);
      });
      
      // Call API to create product
      const response = await fetch('/api/products', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Gagal membuat produk');
      }
      
      const newProduct = await response.json();
      toast.success("Produk berhasil dibuat");
      router.push(`/admin/products/view/${newProduct.publicId}`);
    } catch (error: any) {
      console.error("Error creating product:", error);
      toast.error(error.message || "Gagal membuat produk");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href="/admin/products"
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <h1 className="text-2xl font-bold">Tambah Produk Baru</h1>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Info Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Informasi Dasar
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="name" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Nama Produk *
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  required
                  className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="Masukkan nama produk"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-500">{errors.name}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="categoryId" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Kategori *
                </label>
                <select
                  id="categoryId"
                  name="categoryId"
                  required
                  className={`w-full px-3 py-2 border ${errors.categoryId ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                >
                  <option value="">Pilih Kategori</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                {errors.categoryId && (
                  <p className="mt-1 text-sm text-red-500">{errors.categoryId}</p>
                )}
                {categories.length === 0 && (
                  <p className="mt-1 text-sm text-amber-600">
                    Belum ada kategori produk. 
                    <Link href="/admin/categories/products/create" className="text-primary-600 hover:text-primary-700 ml-1">
                      Buat kategori baru
                    </Link>
                  </p>
                )}
              </div>
            </div>
            
            <div>
              <label 
                htmlFor="description" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Deskripsi *
              </label>
              <textarea
                id="description"
                name="description"
                rows={4}
                required
                className={`w-full px-3 py-2 border ${errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Jelaskan detail produk Anda"
              ></textarea>
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>
          </div>
          
          {/* Pricing & Inventory Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Harga & Inventori
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="price" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Harga (Rp) *
                </label>
                <input
                  type="number"
                  id="price"
                  name="price"
                  required
                  min="0"
                  step="1000"
                  className={`w-full px-3 py-2 border ${errors.price ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="150000"
                />
                {errors.price && (
                  <p className="mt-1 text-sm text-red-500">{errors.price}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="stock" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Stok *
                </label>
                <input
                  type="number"
                  id="stock"
                  name="stock"
                  required
                  min="0"
                  className={`w-full px-3 py-2 border ${errors.stock ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="10"
                />
                {errors.stock && (
                  <p className="mt-1 text-sm text-red-500">{errors.stock}</p>
                )}
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label 
                  htmlFor="sku" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  SKU
                </label>
                <input
                  type="text"
                  id="sku"
                  name="sku"
                  className={`w-full px-3 py-2 border ${errors.sku ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                  placeholder="BRG-001"
                />
                {errors.sku && (
                  <p className="mt-1 text-sm text-red-500">{errors.sku}</p>
                )}
              </div>
              
              <div>
                <label 
                  htmlFor="weight" 
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Berat
                </label>
                <div className="grid grid-cols-2 gap-2">
                  <input
                    type="number"
                    id="weight"
                    name="weight"
                    min="0"
                    step="0.01"
                    className={`w-full px-3 py-2 border ${errors.weight ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                    placeholder="500"
                  />
                  <select
                    name="weightUnit"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="gram">Gram</option>
                    <option value="kg">Kilogram</option>
                    <option value="ton">Ton</option>
                  </select>
                </div>
                {errors.weight && (
                  <p className="mt-1 text-sm text-red-500">{errors.weight}</p>
                )}
                <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  Berat akan disimpan dalam gram untuk perhitungan sistem
                </p>
              </div>
            </div>
          </div>
          
          {/* Images Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Gambar Produk
            </h2>
            
            <div className="space-y-4">
              {/* Image previews */}
              {imagePreviewUrls.length > 0 && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-4">
                  {imagePreviewUrls.map((url, index) => (
                    <div key={index} className="relative group">
                      <div className="h-32 rounded-md overflow-hidden bg-gray-200 dark:bg-gray-700">
                        <img 
                          src={url} 
                          alt={`Preview ${index + 1}`} 
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <button
                        type="button"
                        onClick={() => removeImage(index)}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        <X size={16} />
                      </button>
                    </div>
                  ))}
                </div>
              )}
              
              {/* Upload button */}
              <div className="flex items-center justify-center w-full">
                <label
                  htmlFor="productImages"
                  className={`flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-md dark:border-gray-700 cursor-pointer bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                    images.length >= 5 ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <Upload className="w-8 h-8 mb-3 text-gray-400" />
                    <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                      <span className="font-semibold">Klik untuk upload</span> atau drag and drop
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      PNG, JPG atau WEBP (max. 2MB, maksimal 5 gambar)
                    </p>
                  </div>
                  <input
                    id="productImages"
                    type="file"
                    multiple
                    accept="image/*"
                    className="hidden"
                    onChange={handleImageChange}
                    disabled={images.length >= 5}
                  />
                </label>
              </div>
              
              {images.length >= 5 && (
                <p className="text-xs text-amber-500 dark:text-amber-400 mt-2">
                  Batas maksimum 5 gambar telah tercapai.
                </p>
              )}
            </div>
          </div>
          
          {/* Submit Buttons */}
          <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Link
              href="/admin/products"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
            >
              Batal
            </Link>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <>
                  <Loader2 size={18} className="mr-2 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save size={18} className="mr-2" />
                  Simpan Produk
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// src/app/admin/categories/products/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  Tags, 
  Search, 
  Plus, 
  Edit, 
  Trash2, 
  Package,
  Loader2
} from "lucide-react";
import { toast } from "react-hot-toast";

interface Category {
  id: number;
  publicId: string;
  name: string;
  description?: string;
  type: string;
  createdAt: string;
  _count: {
    products: number;
    services: number;
  };
}

export default function AdminProductCategoriesPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);

  // Fetch categories
  useEffect(() => {
    fetchCategories();
  }, [searchQuery]);

  const fetchCategories = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams({
        type: "PRODUCT",
        ...(searchQuery && { search: searchQuery }),
      });

      const response = await fetch(`/api/categories?${params}`);
      const data = await response.json();

      if (response.ok) {
        setCategories(data);
      } else {
        throw new Error(data.error || "Gagal memuat kategori");
      }
    } catch (error: any) {
      console.error("Error fetching categories:", error);
      toast.error(error.message || "Gagal memuat kategori");
      setCategories([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Delete category
  const handleDeleteCategory = async (publicId: string) => {
    if (!confirm("Apakah Anda yakin ingin menghapus kategori ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/categories/${publicId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus kategori");
      }
      
      toast.success("Kategori berhasil dihapus");
      fetchCategories();
    } catch (error: any) {
      console.error("Error deleting category:", error);
      toast.error(error.message || "Gagal menghapus kategori");
    } finally {
      setIsDeleting(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
  };

  if (status === "loading") {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Kategori Produk</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Kelola kategori untuk produk
          </p>
        </div>
        <Link
          href="/admin/categories/products/create"
          className="flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
        >
          <Plus size={18} className="mr-2" />
          Tambah Kategori
        </Link>
      </div>

      {/* Search */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <form onSubmit={handleSearch} className="relative max-w-md">
          <input
            type="text"
            name="search"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Cari kategori..."
            className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          />
          <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
          <button
            type="submit"
            className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
          >
            Cari
          </button>
        </form>
      </div>

      {/* Categories Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : categories.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Kategori
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Deskripsi
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Jumlah Produk
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tanggal Dibuat
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {categories.map((category) => (
                  <tr key={category.publicId}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="p-2 bg-primary-100 dark:bg-primary-900/20 rounded-md mr-3">
                          <Tags size={20} className="text-primary-600 dark:text-primary-400" />
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {category.name}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            ID: {category.publicId}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="text-sm text-gray-900 dark:text-white max-w-xs truncate">
                        {category.description || "-"}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <Package size={16} className="text-gray-400 mr-2" />
                        <span className="text-sm text-gray-900 dark:text-white">
                          {category._count.products} produk
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(category.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/categories/products/edit/${category.publicId}`}
                          className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                          title="Edit"
                        >
                          <Edit size={18} />
                        </Link>
                        <button
                          onClick={() => handleDeleteCategory(category.publicId)}
                          disabled={isDeleting || category._count.products > 0}
                          className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50 disabled:cursor-not-allowed"
                          title={category._count.products > 0 ? "Tidak dapat dihapus karena masih memiliki produk" : "Hapus"}
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <Tags size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Kategori</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              {searchQuery
                ? `Tidak ada kategori yang sesuai dengan pencarian "${searchQuery}"`
                : "Belum ada kategori produk yang dibuat"}
            </p>
            <Link
              href="/admin/categories/products/create"
              className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
            >
              <Plus size={18} className="mr-2" />
              Tambah Kategori Baru
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

// src/app/admin/categories/products/create/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { toast } from "react-hot-toast";
import { ArrowLeft, Save, Loader2 } from "lucide-react";

export default function CreateProductCategoryPage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (formData: FormData) => {
    const newErrors: Record<string, string> = {};
    
    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    
    if (!name || name.trim() === "") {
      newErrors.name = "Nama kategori wajib diisi";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const form = e.currentTarget;
    const formData = new FormData(form);
    
    // Validate form
    if (!validateForm(formData)) {
      toast.error("Silakan periksa kembali data yang diinput");
      return;
    }
    
    setIsSubmitting(true);

    try {
      const name = formData.get("name") as string;
      const description = formData.get("description") as string;

      console.log("Submitting category:", { name, description, type: "PRODUCT" }); // Debug

      const response = await fetch("/api/categories", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: name.trim(),
          description: description.trim() || null,
          type: "PRODUCT",
        }),
      });
      
      const responseData = await response.json();
      console.log("Response:", responseData); // Debug
      
      if (!response.ok) {
        throw new Error(responseData.error || 'Gagal membuat kategori');
      }
      
      toast.success("Kategori produk berhasil dibuat");
      router.push("/admin/categories/products");
    } catch (error: any) {
      console.error("Error creating category:", error);
      toast.error(error.message || "Gagal membuat kategori");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href="/admin/categories/products"
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <div>
            <h1 className="text-2xl font-bold">Tambah Kategori Produk</h1>
            <p className="text-gray-500 dark:text-gray-400">
              Buat kategori baru untuk produk
            </p>
          </div>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Info Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Informasi Kategori
            </h2>
            
            <div>
              <label 
                htmlFor="name" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Nama Kategori *
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Masukkan nama kategori"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-500">{errors.name}</p>
              )}
            </div>
            
            <div>
              <label 
                htmlFor="description" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Deskripsi
              </label>
              <textarea
                id="description"
                name="description"
                rows={4}
                className={`w-full px-3 py-2 border ${errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Masukkan deskripsi kategori (opsional)"
              ></textarea>
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>
          </div>
          
          {/* Submit Buttons */}
          <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Link
              href="/admin/categories/products"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
            >
              Batal
            </Link>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <>
                  <Loader2 size={18} className="mr-2 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save size={18} className="mr-2" />
                  Simpan Kategori
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// src/app/admin/categories/products/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  Tags, 
  Search, 
  Plus, 
  Edit, 
  Trash2, 
  Package,
  Loader2
} from "lucide-react";
import { toast } from "react-hot-toast";

interface Category {
  id: number;
  publicId: string;
  name: string;
  description?: string;
  type: string;
  createdAt: string;
  _count: {
    products: number;
    services: number;
  };
}

export default function AdminProductCategoriesPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);

  // Fetch categories
  useEffect(() => {
    fetchCategories();
  }, [searchQuery]);

  const fetchCategories = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams({
        type: "PRODUCT",
        ...(searchQuery && { search: searchQuery }),
      });

      const response = await fetch(`/api/categories?${params}`);
      const data = await response.json();

      if (response.ok) {
        setCategories(data);
      } else {
        throw new Error(data.error || "Gagal memuat kategori");
      }
    } catch (error: any) {
      console.error("Error fetching categories:", error);
      toast.error(error.message || "Gagal memuat kategori");
      setCategories([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Delete category
  const handleDeleteCategory = async (publicId: string) => {
    if (!confirm("Apakah Anda yakin ingin menghapus kategori ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/categories/${publicId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus kategori");
      }
      
      toast.success("Kategori berhasil dihapus");
      fetchCategories();
    } catch (error: any) {
      console.error("Error deleting category:", error);
      toast.error(error.message || "Gagal menghapus kategori");
    } finally {
      setIsDeleting(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
  };

  if (status === "loading") {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Kategori Produk</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Kelola kategori untuk produk
          </p>
        </div>
        <Link
          href="/admin/categories/products/create"
          className="flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
        >
          <Plus size={18} className="mr-2" />
          Tambah Kategori
        </Link>
      </div>

      {/* Search */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <form onSubmit={handleSearch} className="relative max-w-md">
          <input
            type="text"
            name="search"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Cari kategori..."
            className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          />
          <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
          <button
            type="submit"
            className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
          >
            Cari
          </button>
        </form>
      </div>

      {/* Categories Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : categories.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Kategori
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Deskripsi
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Jumlah Produk
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tanggal Dibuat
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {categories.map((category) => (
                  <tr key={category.publicId}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="p-2 bg-primary-100 dark:bg-primary-900/20 rounded-md mr-3">
                          <Tags size={20} className="text-primary-600 dark:text-primary-400" />
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {category.name}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            ID: {category.publicId}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="text-sm text-gray-900 dark:text-white max-w-xs truncate">
                        {category.description || "-"}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <Package size={16} className="text-gray-400 mr-2" />
                        <span className="text-sm text-gray-900 dark:text-white">
                          {category._count.products} produk
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(category.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/categories/products/edit/${category.publicId}`}
                          className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                          title="Edit"
                        >
                          <Edit size={18} />
                        </Link>
                        <button
                          onClick={() => handleDeleteCategory(category.publicId)}
                          disabled={isDeleting || category._count.products > 0}
                          className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50 disabled:cursor-not-allowed"
                          title={category._count.products > 0 ? "Tidak dapat dihapus karena masih memiliki produk" : "Hapus"}
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <Tags size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Kategori</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              {searchQuery
                ? `Tidak ada kategori yang sesuai dengan pencarian "${searchQuery}"`
                : "Belum ada kategori produk yang dibuat"}
            </p>
            <Link
              href="/admin/categories/products/create"
              className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
            >
              <Plus size={18} className="mr-2" />
              Tambah Kategori Baru
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

// src/app/admin/categories/services/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  Tags, 
  Search, 
  Plus, 
  Edit, 
  Trash2, 
  Wrench,
  Loader2
} from "lucide-react";
import { toast } from "react-hot-toast";

interface Category {
  id: number;
  publicId: string;
  name: string;
  description?: string;
  type: string;
  createdAt: string;
  _count: {
    products: number;
    services: number;
  };
}

export default function AdminServiceCategoriesPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);

  // Fetch categories
  useEffect(() => {
    fetchCategories();
  }, [searchQuery]);

  const fetchCategories = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams({
        type: "SERVICE",
        ...(searchQuery && { search: searchQuery }),
      });

      const response = await fetch(`/api/categories?${params}`);
      const data = await response.json();

      if (response.ok) {
        setCategories(Array.isArray(data) ? data : []);
      } else {
        throw new Error(data.error || "Gagal memuat kategori");
      }
    } catch (error: any) {
      console.error("Error fetching categories:", error);
      toast.error(error.message || "Gagal memuat kategori");
      setCategories([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Delete category
  const handleDeleteCategory = async (publicId: string) => {
    if (!confirm("Apakah Anda yakin ingin menghapus kategori ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/categories/${publicId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus kategori");
      }
      
      toast.success("Kategori berhasil dihapus");
      fetchCategories();
    } catch (error: any) {
      console.error("Error deleting category:", error);
      toast.error(error.message || "Gagal menghapus kategori");
    } finally {
      setIsDeleting(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
  };

  if (status === "loading") {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Kategori Jasa</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Kelola kategori untuk jasa/layanan
          </p>
        </div>
        <Link
          href="/admin/categories/services/create"
          className="flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
        >
          <Plus size={18} className="mr-2" />
          Tambah Kategori
        </Link>
      </div>

      {/* Search */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <form onSubmit={handleSearch} className="relative max-w-md">
          <input
            type="text"
            name="search"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Cari kategori..."
            className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          />
          <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
          <button
            type="submit"
            className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
          >
            Cari
          </button>
        </form>
      </div>

      {/* Categories Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : categories.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Kategori
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Deskripsi
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Jumlah Jasa
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tanggal Dibuat
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {categories.map((category) => (
                  <tr key={category.publicId}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="p-2 bg-green-100 dark:bg-green-900/20 rounded-md mr-3">
                          <Wrench size={20} className="text-green-600 dark:text-green-400" />
                        </div>
                        <div>
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {category.name}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            ID: {category.publicId}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="text-sm text-gray-900 dark:text-white max-w-xs truncate">
                        {category.description || "-"}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <Wrench size={16} className="text-gray-400 mr-2" />
                        <span className="text-sm text-gray-900 dark:text-white">
                          {category._count.services} jasa
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(category.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/categories/services/edit/${category.publicId}`}
                          className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                          title="Edit"
                        >
                          <Edit size={18} />
                        </Link>
                        <button
                          onClick={() => handleDeleteCategory(category.publicId)}
                          disabled={isDeleting || category._count.services > 0}
                          className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50 disabled:cursor-not-allowed"
                          title={category._count.services > 0 ? "Tidak dapat dihapus karena masih memiliki jasa" : "Hapus"}
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <Tags size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Kategori</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              {searchQuery
                ? `Tidak ada kategori yang sesuai dengan pencarian "${searchQuery}"`
                : "Belum ada kategori jasa yang dibuat"}
            </p>
            <Link
              href="/admin/categories/services/create"
              className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
            >
              <Plus size={18} className="mr-2" />
              Tambah Kategori Baru
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

// src/app/admin/categories/services/create/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { toast } from "react-hot-toast";
import { ArrowLeft, Save, Loader2 } from "lucide-react";

export default function CreateServiceCategoryPage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (formData: FormData) => {
    const newErrors: Record<string, string> = {};
    
    const name = formData.get("name") as string;
    const description = formData.get("description") as string;
    
    if (!name || name.trim() === "") {
      newErrors.name = "Nama kategori wajib diisi";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const form = e.currentTarget;
    const formData = new FormData(form);
    
    // Validate form
    if (!validateForm(formData)) {
      toast.error("Silakan periksa kembali data yang diinput");
      return;
    }
    
    setIsSubmitting(true);

    try {
      const name = formData.get("name") as string;
      const description = formData.get("description") as string;

      console.log("Submitting service category:", { name, description, type: "SERVICE" }); // Debug

      const response = await fetch("/api/categories", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: name.trim(),
          description: description.trim() || null,
          type: "SERVICE",
        }),
      });
      
      const responseData = await response.json();
      console.log("Response:", responseData); // Debug
      
      if (!response.ok) {
        throw new Error(responseData.error || 'Gagal membuat kategori');
      }
      
      toast.success("Kategori jasa berhasil dibuat");
      router.push("/admin/categories/services");
    } catch (error: any) {
      console.error("Error creating category:", error);
      toast.error(error.message || "Gagal membuat kategori");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Link
            href="/admin/categories/services"
            className="mr-4 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            <ArrowLeft size={20} />
          </Link>
          <div>
            <h1 className="text-2xl font-bold">Tambah Kategori Jasa</h1>
            <p className="text-gray-500 dark:text-gray-400">
              Buat kategori baru untuk jasa/layanan
            </p>
          </div>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Info Section */}
          <div className="space-y-4">
            <h2 className="text-lg font-semibold border-b pb-2 border-gray-200 dark:border-gray-700">
              Informasi Kategori
            </h2>
            
            <div>
              <label 
                htmlFor="name" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Nama Kategori *
              </label>
              <input
                type="text"
                id="name"
                name="name"
                required
                className={`w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Masukkan nama kategori jasa"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-500">{errors.name}</p>
              )}
            </div>
            
            <div>
              <label 
                htmlFor="description" 
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Deskripsi
              </label>
              <textarea
                id="description"
                name="description"
                rows={4}
                className={`w-full px-3 py-2 border ${errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white`}
                placeholder="Masukkan deskripsi kategori jasa (opsional)"
              ></textarea>
              {errors.description && (
                <p className="mt-1 text-sm text-red-500">{errors.description}</p>
              )}
            </div>
          </div>
          
          {/* Submit Buttons */}
          <div className="flex items-center justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
            <Link
              href="/admin/categories/services"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
            >
              Batal
            </Link>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <>
                  <Loader2 size={18} className="mr-2 animate-spin" />
                  Menyimpan...
                </>
              ) : (
                <>
                  <Save size={18} className="mr-2" />
                  Simpan Kategori
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// src/components/dashboard/sidebar.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { signOut } from "next-auth/react";
import { useTheme } from "next-themes";
import {
  LayoutDashboard,
  Package,
  Wrench,
  ShoppingCart,
  Users,
  MessageSquare,
  User,
  Settings,
  LogOut,
  Sun,
  Moon,
  UserCog,
  ChevronLeft,
  Menu,
  ChevronDown,
  ChevronRight,
  Plus,
  Tags,
  UserCheck
} from "lucide-react";

interface SidebarProps {
  userRole: string;
}

export default function Sidebar({ userRole }: SidebarProps) {
  const pathname = usePathname();
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);
  const [collapsed, setCollapsed] = useState(false);
  const [expandedMenus, setExpandedMenus] = useState<string[]>([]);
  
  // Untuk menghindari hydration mismatch
  useEffect(() => {
    setMounted(true);
  }, []);

  const toggleMenu = (menuKey: string) => {
    if (collapsed) return; // Tidak bisa expand jika sidebar collapsed
    
    setExpandedMenus(prev => 
      prev.includes(menuKey) 
        ? prev.filter(key => key !== menuKey)
        : [...prev, menuKey]
    );
  };

  const isMenuExpanded = (menuKey: string) => {
    return expandedMenus.includes(menuKey);
  };
  
  // Menentukan menu items berdasarkan role
  const getMenuItems = () => {
    switch (userRole) {
      case "ADMIN":
        return [
          { name: "Dashboard", href: "/admin", icon: LayoutDashboard },
          { 
            name: "Produk", 
            href: "/admin/products", 
            icon: Package,
            expandable: true,
            key: "products",
            subItems: [
              { name: "Semua Produk", href: "/admin/products" },
              { name: "Tambah Produk", href: "/admin/products/create", icon: Plus },
              { name: "Kategori Produk", href: "/admin/categories/products", icon: Tags },
              { name: "Tambah Kategori Produk", href: "/admin/categories/products/create", icon: Plus }
            ]
          },
          { 
            name: "Jasa", 
            href: "/admin/services", 
            icon: Wrench,
            expandable: true,
            key: "services",
            subItems: [
              { name: "Semua Jasa", href: "/admin/services" },
              { name: "Tambah Jasa", href: "/admin/services/create", icon: Plus },
              { name: "Kategori Jasa", href: "/admin/categories/services", icon: Tags },
              { name: "Tambah Kategori Jasa", href: "/admin/categories/services/create", icon: Plus }
            ]
          },
          { name: "Pesanan", href: "/admin/orders", icon: ShoppingCart },
          { name: "Pelanggan", href: "/admin/customers", icon: UserCheck },
          { name: "Pengguna", href: "/admin/users", icon: UserCog },
          { name: "Testimoni", href: "/admin/reviews", icon: MessageSquare },
          { name: "Profil", href: "/admin/profile", icon: User },
          { name: "Pengaturan", href: "/admin/settings", icon: Settings },
        ];
      case "OWNER":
        return [
          { name: "Dashboard", href: "/owner", icon: LayoutDashboard },
          { name: "Laporan Penjualan", href: "/owner/sales", icon: ShoppingCart },
          { name: "Laporan Keuangan", href: "/owner/finance", icon: Package },
          { name: "Pengguna", href: "/owner/users", icon: Users },
          { name: "Profil", href: "/owner/profile", icon: User },
          { name: "Pengaturan", href: "/owner/settings", icon: Settings },
        ];
      case "FINANCE":
        return [
          { name: "Dashboard", href: "/finance", icon: LayoutDashboard },
          { name: "Pembayaran", href: "/finance/payments", icon: Package },
          { name: "Laporan", href: "/finance/reports", icon: ShoppingCart },
          { name: "Profil", href: "/finance/profile", icon: User },
          { name: "Pengaturan", href: "/finance/settings", icon: Settings },
        ];
      case "CUSTOMER":
        return [
          { name: "Dashboard", href: "/customer", icon: LayoutDashboard },
          { 
            name: "Produk", 
            href: "/customer/products", 
            icon: Package,
            expandable: true,
            key: "products",
            subItems: [
              { name: "Semua Produk", href: "/customer/products" },
              { name: "Kategori Produk", href: "/customer/products/categories", icon: Tags }
            ]
          },
          { 
            name: "Jasa", 
            href: "/customer/services", 
            icon: Wrench,
            expandable: true,
            key: "services", 
            subItems: [
              { name: "Semua Jasa", href: "/customer/services" },
              { name: "Kategori Jasa", href: "/customer/services/categories", icon: Tags }
            ]
          },
          { name: "Keranjang", href: "/customer/cart", icon: ShoppingCart },
          { name: "Pesanan", href: "/customer/orders", icon: ShoppingCart },
          { name: "Profil", href: "/customer/profile", icon: User },
          { name: "Pengaturan", href: "/customer/settings", icon: Settings },
        ];
      default:
        return [];
    }
  };

  const menuItems = getMenuItems();
  const roleTitle = {
    "ADMIN": "Panel Admin",
    "OWNER": "Panel Owner",
    "FINANCE": "Panel Finance",
    "CUSTOMER": "Area Customer"
  }[userRole] || "";

  return (
    <div className={`${collapsed ? 'w-16' : 'w-64'} h-full bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col transition-all duration-200`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        {!collapsed && (
          <div>
            <h2 className="text-xl font-bold text-primary-600 dark:text-primary-400">
              CV Hutama
            </h2>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {roleTitle}
            </p>
          </div>
        )}
        <button 
          onClick={() => setCollapsed(!collapsed)} 
          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        >
          {collapsed ? <Menu size={20} /> : <ChevronLeft size={20} />}
        </button>
      </div>
      
      {/* Menu Items */}
      <nav className="flex-1 overflow-y-auto py-4">
        <ul className="space-y-1 px-3">
          {menuItems.map((item) => {
            const isActive = pathname === item.href || pathname.startsWith(`${item.href}/`);
            const Icon = item.icon;
            const hasSubItems = item.expandable && item.subItems && item.subItems.length > 0;
            const isExpanded = hasSubItems && isMenuExpanded(item.key || '');
            
            return (
              <li key={item.name}>
                {/* Main Menu Item */}
                <div className="flex items-center">
                  <Link
                    href={item.href}
                    className={`flex items-center ${collapsed ? 'justify-center w-full' : 'px-3 flex-1'} py-2 rounded-md transition ${
                      isActive
                        ? "bg-primary-50 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400"
                        : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                    }`}
                    title={collapsed ? item.name : ""}
                  >
                    <Icon size={18} className={collapsed ? "" : "mr-3"} />
                    {!collapsed && <span>{item.name}</span>}
                  </Link>
                  
                  {/* Expand/Collapse Button */}
                  {!collapsed && hasSubItems && (
                    <button
                      onClick={() => toggleMenu(item.key || '')}
                      className="p-1 ml-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                      title={isExpanded ? "Tutup" : "Buka"}
                    >
                      {isExpanded ? (
                        <ChevronDown size={16} />
                      ) : (
                        <ChevronRight size={16} />
                      )}
                    </button>
                  )}
                </div>
                
                {/* Sub Menu Items */}
                {!collapsed && hasSubItems && isExpanded && (
                  <ul className="mt-1 ml-6 space-y-1">
                    {item.subItems?.map((subItem, index) => {
                      const SubIcon = subItem.icon;
                      const isSubActive = pathname === subItem.href;
                      
                      return (
                        <li key={index}>
                          <Link
                            href={subItem.href}
                            className={`flex items-center px-3 py-1 text-sm rounded-md transition ${
                              isSubActive
                                ? "bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300"
                                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700"
                            }`}
                          >
                            {SubIcon && <SubIcon size={14} className="mr-2" />}
                            {subItem.name}
                          </Link>
                        </li>
                      );
                    })}
                  </ul>
                )}
              </li>
            );
          })}
        </ul>
      </nav>
      
      {/* Footer - Theme Toggle & Logout */}
      <div className="p-4 border-t border-gray-200 dark:border-gray-700 space-y-3">
        {/* Theme Toggle */}
        {mounted && (
          <button
            onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            className={`flex items-center ${collapsed ? 'justify-center' : 'w-full px-3'} py-2 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700`}
            title={collapsed ? (theme === "dark" ? "Light Mode" : "Dark Mode") : ""}
          >
            {theme === "dark" ? (
              <>
                <Sun size={18} className={collapsed ? "" : "mr-3"} />
                {!collapsed && <span>Light Mode</span>}
              </>
            ) : (
              <>
                <Moon size={18} className={collapsed ? "" : "mr-3"} />
                {!collapsed && <span>Dark Mode</span>}
              </>
            )}
          </button>
        )}
        
        {/* Logout Button */}
        <button
          onClick={() => signOut({ callbackUrl: "/" })}
          className={`flex items-center ${collapsed ? 'justify-center' : 'w-full px-3'} py-2 text-red-600 dark:text-red-400 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20`}
          title={collapsed ? "Logout" : ""}
        >
          <LogOut size={18} className={collapsed ? "" : "mr-3"} />
          {!collapsed && <span>Logout</span>}
        </button>
      </div>
    </div>
  );
}

// src/components/dashboard/layout.tsx
"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import Sidebar from "@/components/dashboard/sidebar";
import { Menu } from "lucide-react";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);

  // Deteksi ukuran layar untuk layout responsif
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 1024);
    };
    
    // Set initial state
    handleResize();
    
    // Add event listener
    window.addEventListener("resize", handleResize);
    
    // Clean up
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  
  // Toggle sidebar collapse untuk desktop
  const toggleSidebar = () => {
    setSidebarCollapsed(!sidebarCollapsed);
  };
  
  // Toggle sidebar untuk mobile
  const toggleMobileSidebar = () => {
    setMobileSidebarOpen(!mobileSidebarOpen);
  };
  
  // Redirect jika tidak terotentikasi
  if (status === "unauthenticated") {
    router.push("/login");
    return null;
  }
  
  // Loading state
  if (status === "loading") {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
        <div className="w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }
  
  const userRole = session?.user?.role || "CUSTOMER";
  
  return (
    <div className="flex h-screen bg-gray-100 dark:bg-gray-900 overflow-hidden">
      {/* Sidebar untuk Desktop */}
      <div className={`hidden lg:block h-full`}>
        <Sidebar 
          userRole={userRole} 
          collapsed={sidebarCollapsed} 
          toggleSidebar={toggleSidebar} 
        />
      </div>
      
      {/* Mobile Sidebar (overlay) */}
      {isMobile && mobileSidebarOpen && (
        <div className="fixed inset-0 z-40 lg:hidden">
          {/* Backdrop overlay */}
          <div 
            className="fixed inset-0 bg-gray-600 bg-opacity-75 transition-opacity" 
            onClick={toggleMobileSidebar}
          ></div>
          
          {/* Sidebar */}
          <div className="relative flex-1 flex flex-col max-w-xs w-full bg-white dark:bg-gray-800 h-full">
            <Sidebar 
              userRole={userRole} 
              collapsed={false} 
              toggleSidebar={toggleMobileSidebar} 
            />
          </div>
        </div>
      )}
      
      {/* Main Content */}
      <div className={`flex flex-col flex-1 overflow-hidden`}>
        {/* Mobile Header with hamburger menu */}
        <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 py-4 px-4 lg:hidden">
          <div className="flex items-center justify-between">
            <button 
              onClick={toggleMobileSidebar}
              className="text-gray-600 dark:text-gray-300 focus:outline-none"
              aria-label="Open menu"
            >
              <Menu size={24} />
            </button>
            <h1 className="text-lg font-semibold text-gray-800 dark:text-white">
              CV Hutama Mandiri
            </h1>
            <div className="w-6"></div> {/* Spacer for alignment */}
          </div>
        </header>
        
        {/* Main content */}
        <main className="flex-1 overflow-auto p-4 md:p-6">
          {children}
        </main>
      </div>
    </div>
  );
}

// src/components/footer.tsx
import Link from "next/link";

export default function Footer() {
  return (
    <footer className="bg-gray-900 text-white py-12">
      <div className="container mx-auto px-4">
        <div className="grid md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-xl font-bold mb-4">CV Hutama Mandiri Indotech</h3>
            <p className="text-gray-400">
              Jasa bubut berkualitas dan penjualan sparepart terpercaya untuk
              kebutuhan industri Anda.
            </p>
          </div>
          <div>
            <h4 className="text-lg font-bold mb-4">Layanan</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/services" className="text-gray-400 hover:text-white">
                  Jasa Bubut
                </Link>
              </li>
              <li>
                <Link href="/products" className="text-gray-400 hover:text-white">
                  Sparepart
                </Link>
              </li>
              <li>
                <Link href="/services" className="text-gray-400 hover:text-white">
                  Pesanan Khusus
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-bold mb-4">Perusahaan</h4>
            <ul className="space-y-2">
              <li>
                <Link href="/about" className="text-gray-400 hover:text-white">
                  Tentang Kami
                </Link>
              </li>
              <li>
                <Link href="/contact" className="text-gray-400 hover:text-white">
                  Kontak
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-bold mb-4">Kontak</h4>
            <address className="text-gray-400 not-italic">
              <p>Jl. Industri Raya No. 123</p>
              <p>Tangerang Selatan, Banten</p>
              <p className="mt-2">Email: info@hutamamandiri.com</p>
              <p>Telepon: 021-12345678</p>
            </address>
          </div>
        </div>
        <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
          <p>&copy; {new Date().getFullYear()} CV Hutama Mandiri Indotech. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}

// src/components/navbar.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import { useTheme } from "next-themes";
import { toast } from "react-hot-toast";

export default function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [mounted, setMounted] = useState(false);
  const pathname = usePathname();
  const { data: session, status } = useSession(); // Tambahkan status
  const { theme, setTheme } = useTheme();

  useEffect(() => {
    setMounted(true);
  }, []);

  // HIDE NAVBAR di halaman dashboard
  const isDashboard = pathname.includes('/admin') || 
                     pathname.includes('/owner') || 
                     pathname.includes('/finance') || 
                     pathname.includes('/customer');
  
  // Jika di dashboard atau belum mounted, jangan tampilkan navbar
  if (isDashboard || !mounted) {
    return null;
  }

  // Dynamic nav items berdasarkan user role
  const getNavItems = () => {
    const baseItems = [
      { name: "Beranda", href: "/" }
    ];

    // Debug log untuk melihat session
    console.log("🔍 Debug Navbar:", { 
      session: session, 
      role: session?.user?.role, 
      status: status 
    });

    // TEMPORARY FIX: Jika ada session apapun rolenya, paksa customer routes
    if (session) {
      console.log("✅ Session detected, forcing customer routes");
      return [
        ...baseItems,
        { name: "Produk", href: "/customer/products" },
        { name: "Jasa", href: "/customer/services" },
        { name: "Tentang Kami", href: "/about" },
        { name: "Kontak", href: "/contact" },
      ];
    }

    console.log("⚠️ No session, using public routes");
    // Default untuk user belum login
    return [
      ...baseItems,
      { name: "Produk", href: "/products" },
      { name: "Jasa", href: "/services" },
      { name: "Tentang Kami", href: "/about" },
      { name: "Kontak", href: "/contact" },
    ];
  };

  const navItems = getNavItems();

  // Handle logout dengan toast notification
  const handleLogout = async () => {
    try {
      toast.loading("Logout...");
      
      await signOut({ 
        callbackUrl: "/",
        redirect: true 
      });
      
    } catch (error) {
      console.error("Logout error:", error);
      toast.error("Terjadi kesalahan saat logout");
    }
  };

  return (
    <nav className="bg-white dark:bg-gray-900 shadow-md">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link href="/" className="text-xl font-bold text-blue-600 dark:text-blue-400">
                CV Hutama Mandiri
              </Link>
            </div>
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              {navItems.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    pathname === item.href
                      ? "border-blue-500 text-gray-900 dark:text-gray-100"
                      : "border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-700"
                  }`}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
          <div className="hidden sm:ml-6 sm:flex sm:items-center space-x-4">
            <button
              onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
              className="p-1 rounded-full text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
              aria-label="Toggle theme"
            >
              {theme === "dark" ? "🌞" : "🌙"}
            </button>

            {session ? (
              <>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  Halo, {session.user?.name}
                </span>
                <Link
                  href={`/${session.user?.role?.toLowerCase()}`}
                  className="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
                >
                  Dashboard
                </Link>
                <button
                  onClick={handleLogout}
                  className="px-3 py-2 rounded-md text-sm font-medium text-white bg-red-600 hover:bg-red-700 transition-colors"
                >
                  Logout
                </button>
              </>
            ) : (
              <>
                <Link
                  href="/login"
                  className="px-3 py-2 rounded-md text-sm font-medium text-blue-600 dark:text-blue-400 border border-blue-600 dark:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
                >
                  Login
                </Link>
                <Link
                  href="/register"
                  className="px-3 py-2 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors"
                >
                  Register
                </Link>
              </>
            )}
          </div>
          <div className="-mr-2 flex items-center sm:hidden">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 dark:text-gray-200 hover:text-gray-500 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800"
              aria-label="Toggle menu"
            >
              <span className="sr-only">Open main menu</span>
              {isMenuOpen ? "✕" : "☰"}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isMenuOpen && (
        <div className="sm:hidden">
          <div className="pt-2 pb-3 space-y-1">
            {navItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={`block pl-3 pr-4 py-2 border-l-4 text-base font-medium ${
                  pathname === item.href
                    ? "bg-blue-50 dark:bg-blue-900/20 border-blue-500 text-blue-700 dark:text-blue-400"
                    : "border-transparent text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800 hover:border-gray-300 dark:hover:border-gray-700 hover:text-gray-800 dark:hover:text-gray-200"
                }`}
                onClick={() => setIsMenuOpen(false)}
              >
                {item.name}
              </Link>
            ))}

            <div className="pt-4 pb-3 border-t border-gray-200 dark:border-gray-700">
              <button
                onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
                className="block w-full text-left pl-3 pr-4 py-2 text-base font-medium text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800"
              >
                {theme === "dark" ? "🌞 Light Mode" : "🌙 Dark Mode"}
              </button>

              {session ? (
                <>
                  <div className="pl-3 pr-4 py-2 text-base font-medium text-gray-600 dark:text-gray-400">
                    Halo, {session.user?.name}
                  </div>
                  <Link
                    href={`/${session.user?.role?.toLowerCase()}`}
                    className="block pl-3 pr-4 py-2 text-base font-medium text-blue-600 dark:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Dashboard
                  </Link>
                  <button
                    onClick={() => {
                      setIsMenuOpen(false);
                      handleLogout();
                    }}
                    className="block w-full text-left pl-3 pr-4 py-2 text-base font-medium text-red-600 dark:text-red-400 hover:bg-gray-50 dark:hover:bg-gray-800"
                  >
                    Logout
                  </button>
                </>
              ) : (
                <div className="flex flex-col space-y-2 px-3 pt-2">
                  <Link
                    href="/login"
                    className="w-full py-2 text-center rounded-md border border-blue-600 dark:border-blue-400 text-blue-600 dark:text-blue-400"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Login
                  </Link>
                  <Link
                    href="/register"
                    className="w-full py-2 text-center rounded-md bg-blue-600 hover:bg-blue-700 text-white"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Register
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </nav>
  );
}

// src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Providers } from "@/providers/Providers";
import Navbar from "@/components/navbar";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "CV Hutama Mandiri Indotech",
  description: "Solusi lengkap untuk kebutuhan teknologi dan konstruksi Anda",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="id" suppressHydrationWarning>
      <body className={inter.className}>
        <Providers>
          <Navbar />
          <main>
            {children}
          </main>
        </Providers>
      </body>
    </html>
  );
}

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-rgb: 10, 10, 10;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}

.hero-section {
  background-image: url('/images/hero-bg.jpg');
  background-size: cover;
  background-position: center;
  position: relative;
}

.hero-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
}

// src/app/admin/page.tsx
import prisma from "@/lib/prisma";
import Link from "next/link";
import { CreditCard, Package, ShoppingCart, Users } from "lucide-react";

export default async function AdminDashboard() {
  // Fetch data statistik
  const totalProducts = await prisma.product.count();
  const totalServices = await prisma.service.count();
  const totalCustomers = await prisma.user.count({
    where: {
      role: "CUSTOMER",
    },
  });
  const totalOrders = await prisma.order.count();
  const pendingOrders = await prisma.order.count({
    where: {
      status: "PENDING",
    },
  });
  const processingOrders = await prisma.order.count({
    where: {
      status: "PROCESSING",
    },
  });

  // Fetch 5 pesanan terbaru
  const latestOrders = await prisma.order.findMany({
    take: 5,
    orderBy: {
      createdAt: "desc",
    },
    include: {
      user: {
        select: {
          name: true,
          email: true,
        },
      },
    },
  });

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold">Dashboard Admin</h1>
        <p className="text-gray-500 dark:text-gray-400">
          Selamat datang di dashboard admin CV Hutama Mandiri Indotech
        </p>
      </div>

      {/* Statistik */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 mr-4">
              <Package size={24} />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
                Total Produk
              </p>
              <p className="text-2xl font-bold">{totalProducts}</p>
            </div>
          </div>
          <Link
            href="/admin/products"
            className="mt-4 block text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline"
          >
            Kelola Produk &rarr;
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100 dark:bg-green-900/20 text-green-600 dark:text-green-400 mr-4">
              <CreditCard size={24} />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
                Total Jasa
              </p>
              <p className="text-2xl font-bold">{totalServices}</p>
            </div>
          </div>
          <Link
            href="/admin/services"
            className="mt-4 block text-sm font-medium text-green-600 dark:text-green-400 hover:underline"
          >
            Kelola Jasa &rarr;
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-purple-100 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400 mr-4">
              <Users size={24} />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
                Total Pelanggan
              </p>
              <p className="text-2xl font-bold">{totalCustomers}</p>
            </div>
          </div>
          <Link
            href="/admin/customers"
            className="mt-4 block text-sm font-medium text-purple-600 dark:text-purple-400 hover:underline"
          >
            Kelola Pelanggan &rarr;
          </Link>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-amber-100 dark:bg-amber-900/20 text-amber-600 dark:text-amber-400 mr-4">
              <ShoppingCart size={24} />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
                Total Pesanan
              </p>
              <p className="text-2xl font-bold">{totalOrders}</p>
            </div>
          </div>
          <Link
            href="/admin/orders"
            className="mt-4 block text-sm font-medium text-amber-600 dark:text-amber-400 hover:underline"
          >
            Kelola Pesanan &rarr;
          </Link>
        </div>
      </div>

      {/* Status Pesanan */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <h2 className="text-lg font-bold mb-4">Status Pesanan</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
         <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-900">
            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
              Menunggu Diproses
            </p>
            <p className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">
              {pendingOrders}
            </p>
          </div>

          <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-900">
            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
              Sedang Diproses
            </p>
            <p className="text-2xl font-bold text-blue-600 dark:text-blue-400">
              {processingOrders}
            </p>
          </div>

          <div className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-900">
            <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
              Total Pesanan
            </p>
            <p className="text-2xl font-bold text-green-600 dark:text-green-400">
              {totalOrders}
            </p>
          </div>
        </div>
      </div>

      {/* Pesanan Terbaru */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        <div className="p-6">
          <h2 className="text-lg font-bold mb-4">Pesanan Terbaru</h2>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead className="bg-gray-50 dark:bg-gray-900">
              <tr>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  ID Pesanan
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  Pelanggan
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  Total
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  Status
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  Tanggal
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >
                  Aksi
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {latestOrders.map((order) => (
                <tr key={order.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                    #{order.orderNumber}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                    {order.user.name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                    Rp {order.totalAmount.toLocaleString("id-ID")}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <span
                      className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        order.status === "PENDING"
                          ? "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
                          : order.status === "PROCESSING"
                          ? "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400"
                          : order.status === "COMPLETED"
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400"
                      }`}
                    >
                      {order.status === "PENDING"
                        ? "Menunggu"
                        : order.status === "PROCESSING"
                        ? "Diproses"
                        : order.status === "COMPLETED"
                        ? "Selesai"
                        : "Dibatalkan"}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                    {new Date(order.createdAt).toLocaleDateString("id-ID")}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Link
                      href={`/admin/orders/${order.id}`}
                      className="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300"
                    >
                      Detail
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          <Link
            href="/admin/orders"
            className="text-sm font-medium text-primary-600 dark:text-primary-400 hover:underline"
          >
            Lihat semua pesanan &rarr;
          </Link>
        </div>
      </div>
    </div>
  );
}

// src/app/admin/layout.tsx
import Sidebar from "@/components/dashboard/sidebar";
import { getServerSession } from "next-auth/next";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth";

export default async function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await getServerSession(authOptions);

  if (!session || session.user.role !== "ADMIN") {
    redirect("/login");
  }

  return (
    <div className="flex h-screen bg-gray-50 dark:bg-gray-900">
      <Sidebar userRole="ADMIN" />
      <div className="flex-1 overflow-auto">
        <main className="p-6">
          {children}
        </main>
      </div>
    </div>
  );
}

// src/app/admin/users/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  UserCog, 
  Search, 
  Filter, 
  Plus, 
  Edit, 
  Trash2, 
  Eye,
  Loader2,
  Shield,
  User,
  Crown,
  Calculator,
  ShoppingCart,
  CheckCircle,
  XCircle
} from "lucide-react";
import { toast } from "react-hot-toast";

interface User {
  id: number;
  name: string;
  email: string;
  phone?: string;
  role: string;
  emailVerified: string | null;
  createdAt: string;
  updatedAt: string;
  _count: {
    orders: number;
  };
}

export default function AdminUsersPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedRole, setSelectedRole] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0,
  });

  // Fetch users
  useEffect(() => {
    fetchUsers();
  }, [pagination.page, selectedRole, searchQuery]);

  const fetchUsers = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        ...(selectedRole && { role: selectedRole }),
        ...(searchQuery && { search: searchQuery }),
      });

      const response = await fetch(`/api/users?${params}`);
      const data = await response.json();

      if (response.ok) {
        setUsers(data.users);
        setPagination(data.pagination);
      } else {
        throw new Error(data.error || "Gagal memuat pengguna");
      }
    } catch (error: any) {
      console.error("Error fetching users:", error);
      toast.error(error.message || "Gagal memuat pengguna");
    } finally {
      setIsLoading(false);
    }
  };

  // Delete user
  const handleDeleteUser = async (userId: number) => {
    if (!confirm("Apakah Anda yakin ingin menghapus pengguna ini?")) return;
    
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/users/${userId}`, { 
        method: 'DELETE' 
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Gagal menghapus pengguna");
      }
      
      toast.success("Pengguna berhasil dihapus");
      fetchUsers();
    } catch (error: any) {
      console.error("Error deleting user:", error);
      toast.error(error.message || "Gagal menghapus pengguna");
    } finally {
      setIsDeleting(false);
    }
  };

  // Get role badge
  const getRoleBadge = (role: string) => {
    const roleConfig = {
      ADMIN: { color: "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400", icon: Shield, label: "Admin" },
      OWNER: { color: "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400", icon: Crown, label: "Owner" },
      FINANCE: { color: "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400", icon: Calculator, label: "Finance" },
      CUSTOMER: { color: "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400", icon: ShoppingCart, label: "Customer" },
    }[role] || { color: "bg-gray-100 text-gray-800", icon: User, label: role };

    const Icon = roleConfig.icon;

    return (
      <span className={`px-2 py-1 inline-flex items-center text-xs leading-5 font-semibold rounded-full ${roleConfig.color}`}>
        <Icon size={12} className="mr-1" />
        {roleConfig.label}
      </span>
    );
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  if (status === "loading") {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Manajemen Pengguna</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Kelola semua pengguna sistem
          </p>
        </div>
        <Link
          href="/admin/users/create"
          className="flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
        >
          <Plus size={18} className="mr-2" />
          Tambah Pengguna
        </Link>
      </div>

      {/* Search and Filter */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
          {/* Search Form */}
          <div className="lg:col-span-8">
            <form onSubmit={handleSearch} className="relative">
              <input
                type="text"
                name="search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Cari nama, email, atau nomor telepon..."
                className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
              <button
                type="submit"
                className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
              >
                Cari
              </button>
            </form>
          </div>

          {/* Role Filter */}
          <div className="lg:col-span-4">
            <div className="relative">
              <select
                value={selectedRole || ""}
                onChange={(e) => {
                  setSelectedRole(e.target.value || null);
                  setPagination(prev => ({ ...prev, page: 1 }));
                }}
                className="w-full py-2 pl-10 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent appearance-none"
              >
                <option value="">Semua Role</option>
                <option value="ADMIN">Admin</option>
                <option value="OWNER">Owner</option>
                <option value="FINANCE">Finance</option>
                <option value="CUSTOMER">Customer</option>
              </select>
              <Filter className="absolute left-3 top-2.5 text-gray-400" size={18} />
            </div>
          </div>
        </div>
      </div>

      {/* Users Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : users.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Pengguna
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Kontak
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Role
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Pesanan
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Bergabung
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {users.map((user) => (
                  <tr key={user.id}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center">
                          <User size={20} className="text-primary-600 dark:text-primary-400" />
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {user.name}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            ID: {user.id}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm text-gray-900 dark:text-white">
                          {user.email}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {user.phone || "-"}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      {getRoleBadge(user.role)}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      {user.emailVerified ? (
                        <span className="px-2 py-1 inline-flex items-center text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400">
                          <CheckCircle size={12} className="mr-1" />
                          Terverifikasi
                        </span>
                      ) : (
                        <span className="px-2 py-1 inline-flex items-center text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400">
                          <XCircle size={12} className="mr-1" />
                          Belum Verifikasi
                        </span>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      {user._count.orders} pesanan
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(user.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/users/${user.id}`}
                          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          title="Lihat Detail"
                        >
                          <Eye size={18} />
                        </Link>
                        <Link
                          href={`/admin/users/edit/${user.id}`}
                          className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                          title="Edit"
                        >
                          <Edit size={18} />
                        </Link>
                        {user.id !== session?.user?.id && (
                          <button
                            onClick={() => handleDeleteUser(user.id)}
                            disabled={isDeleting}
                            className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50"
                            title="Hapus"
                          >
                            <Trash2 size={18} />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <UserCog size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Pengguna</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              {searchQuery || selectedRole
                ? "Tidak ada pengguna yang sesuai dengan filter"
                : "Belum ada pengguna terdaftar"}
            </p>
            <Link
              href="/admin/users/create"
              className="inline-flex items-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md"
            >
              <Plus size={18} className="mr-2" />
              Tambah Pengguna Baru
            </Link>
          </div>
        )}
      </div>

      {/* Pagination */}
      {users.length > 0 && pagination.totalPages > 1 && (
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Menampilkan {((pagination.page - 1) * pagination.limit) + 1} - {Math.min(pagination.page * pagination.limit, pagination.total)} dari {pagination.total} pengguna
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
              disabled={pagination.page <= 1}
              className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Sebelumnya
            </button>
            <span className="px-3 py-2 text-sm bg-primary-600 text-white rounded-md">
              {pagination.page}
            </span>
            <button
              onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
              disabled={pagination.page >= pagination.totalPages}
              className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Selanjutnya
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

// prisma/schema.prisma - BENAR SESUAI SEED.TS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  phone         String?   // field ini dibutuhkan seed
  phoneNumber   String?   // field ini juga dibutuhkan seed
  address       String?   // field ini dibutuhkan seed
  password      String
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  OWNER
  FINANCE
  CUSTOMER
}

enum CategoryType {
  PRODUCT
  SERVICE
}

model Category {
  id          Int          @id @default(autoincrement())
  publicId    String       @unique @default(cuid())
  name        String
  description String?      // field ini dibutuhkan seed
  type        CategoryType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  products Product[]
  services Service[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  sku         String?
  weight      Float?
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category       @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Service {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(cuid())
  name        String
  description String
  price       Float
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category       @relation(fields: [categoryId], references: [id])
  images     ServiceImage[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("services")
}

model ServiceImage {
  id        Int     @id @default(autoincrement())
  url       String
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_images")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique
  userId          Int
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  shippingAddress String?     // field ini dibutuhkan seed
  notes           String?     // field ini dibutuhkan seed
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int?
  serviceId Int?
  quantity  Int
  price     Float

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?  // field ini dibutuhkan seed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  serviceId Int?
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  REVIEW_ADDED
  USER_REGISTERED
  SYSTEM_ALERT
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int?             // null = untuk semua admin
  type      NotificationType
  title     String
  message   String
  data      Json?            // data tambahan (orderId, etc)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// src/app/admin/orders/page.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { 
  ShoppingCart, 
  Search, 
  Filter, 
  Eye,
  Edit,
  Trash2,
  Loader2,
  Package,
  Clock,
  CheckCircle,
  XCircle,
  Truck
} from "lucide-react";
import { toast } from "react-hot-toast";

interface User {
  id: number;
  name: string;
  email: string;
  phone?: string;
}

interface OrderItem {
  id: number;
  quantity: number;
  price: number;
  product?: {
    id: number;
    publicId: string;
    name: string;
    price: number;
    images: { url: string }[];
  };
  service?: {
    id: number;
    publicId: string;
    name: string;
    price: number;
    images: { url: string }[];
  };
}

interface Order {
  id: number;
  orderNumber: string;
  totalAmount: number;
  status: string;
  shippingAddress?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
  user: User;
  orderItems: OrderItem[];
}

export default function AdminOrdersPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [orders, setOrders] = useState<Order[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedStatus, setSelectedStatus] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0,
  });

  // Fetch orders
  useEffect(() => {
    fetchOrders();
  }, [pagination.page, selectedStatus, searchQuery]);

  const fetchOrders = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        limit: pagination.limit.toString(),
        ...(selectedStatus && { status: selectedStatus }),
        ...(searchQuery && { search: searchQuery }),
      });

      const response = await fetch(`/api/orders?${params}`);
      const data = await response.json();

      if (response.ok) {
        setOrders(data.orders);
        setPagination(data.pagination);
      } else {
        throw new Error(data.error || "Gagal memuat pesanan");
      }
    } catch (error: any) {
      console.error("Error fetching orders:", error);
      toast.error(error.message || "Gagal memuat pesanan");
    } finally {
      setIsLoading(false);
    }
  };

  // Update order status
  const updateOrderStatus = async (orderId: number, status: string) => {
    try {
      setIsUpdating(true);
      const response = await fetch(`/api/orders/${orderId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status }),
      });

      if (response.ok) {
        toast.success("Status pesanan berhasil diupdate");
        fetchOrders();
      } else {
        const error = await response.json();
        throw new Error(error.error || "Gagal mengupdate status");
      }
    } catch (error: any) {
      console.error("Error updating order:", error);
      toast.error(error.message || "Gagal mengupdate status");
    } finally {
      setIsUpdating(false);
    }
  };

  // Cancel order
  const cancelOrder = async (orderId: number) => {
    if (!confirm("Apakah Anda yakin ingin membatalkan pesanan ini?")) return;

    try {
      const response = await fetch(`/api/orders/${orderId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        toast.success("Pesanan berhasil dibatalkan");
        fetchOrders();
      } else {
        const error = await response.json();
        throw new Error(error.error || "Gagal membatalkan pesanan");
      }
    } catch (error: any) {
      console.error("Error cancelling order:", error);
      toast.error(error.message || "Gagal membatalkan pesanan");
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    const statusConfig = {
      PENDING: { color: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400", icon: Clock, label: "Menunggu" },
      PROCESSING: { color: "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400", icon: Package, label: "Diproses" },
      SHIPPED: { color: "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400", icon: Truck, label: "Dikirim" },
      DELIVERED: { color: "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400", icon: CheckCircle, label: "Selesai" },
      CANCELLED: { color: "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400", icon: XCircle, label: "Dibatalkan" },
    }[status] || { color: "bg-gray-100 text-gray-800", icon: Clock, label: status };

    const Icon = statusConfig.icon;

    return (
      <span className={`px-2 py-1 inline-flex items-center text-xs leading-5 font-semibold rounded-full ${statusConfig.color}`}>
        <Icon size={12} className="mr-1" />
        {statusConfig.label}
      </span>
    );
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const query = formData.get("search") as string;
    setSearchQuery(query);
    setPagination(prev => ({ ...prev, page: 1 }));
  };

  if (status === "loading") {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Manajemen Pesanan</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Kelola semua pesanan pelanggan
          </p>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
          {/* Search Form */}
          <div className="lg:col-span-8">
            <form onSubmit={handleSearch} className="relative">
              <input
                type="text"
                name="search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Cari nomor pesanan, nama, atau email pelanggan..."
                className="w-full py-2 pl-10 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
              <button
                type="submit"
                className="absolute right-3 top-2 bg-primary-600 hover:bg-primary-700 text-white py-1 px-3 rounded text-sm"
              >
                Cari
              </button>
            </form>
          </div>

          {/* Status Filter */}
          <div className="lg:col-span-4">
            <div className="relative">
              <select
                value={selectedStatus || ""}
                onChange={(e) => {
                  setSelectedStatus(e.target.value || null);
                  setPagination(prev => ({ ...prev, page: 1 }));
                }}
                className="w-full py-2 pl-10 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent appearance-none"
              >
                <option value="">Semua Status</option>
                <option value="PENDING">Menunggu</option>
                <option value="PROCESSING">Diproses</option>
                <option value="SHIPPED">Dikirim</option>
                <option value="DELIVERED">Selesai</option>
                <option value="CANCELLED">Dibatalkan</option>
              </select>
              <Filter className="absolute left-3 top-2.5 text-gray-400" size={18} />
            </div>
          </div>
        </div>
      </div>

      {/* Orders Table */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-10 h-10 text-primary-600 animate-spin" />
          </div>
        ) : orders.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Pesanan
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Pelanggan
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Total
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tanggal
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Aksi
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                {orders.map((order) => (
                  <tr key={order.id}>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          #{order.orderNumber}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {order.orderItems.length} item(s)
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {order.user.name}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {order.user.email}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      Rp {order.totalAmount.toLocaleString("id-ID")}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      {getStatusBadge(order.status)}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                      {new Date(order.createdAt).toLocaleDateString("id-ID", {
                        day: "numeric",
                        month: "long",
                        year: "numeric",
                      })}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <Link
                          href={`/admin/orders/${order.id}`}
                          className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          title="Lihat Detail"
                        >
                          <Eye size={18} />
                        </Link>
                        
                        {/* Quick Status Update */}
                        {order.status === "PENDING" && (
                          <button
                            onClick={() => updateOrderStatus(order.id, "PROCESSING")}
                            disabled={isUpdating}
                            className="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 disabled:opacity-50"
                            title="Proses Pesanan"
                          >
                            <Package size={18} />
                          </button>
                        )}
                        
                        {order.status === "PROCESSING" && (
                          <button
                            onClick={() => updateOrderStatus(order.id, "SHIPPED")}
                            disabled={isUpdating}
                            className="text-purple-500 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300 disabled:opacity-50"
                            title="Kirim Pesanan"
                          >
                            <Truck size={18} />
                          </button>
                        )}
                        
                        {(order.status === "PENDING" || order.status === "PROCESSING") && (
                          <button
                            onClick={() => cancelOrder(order.id)}
                            className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                            title="Batalkan Pesanan"
                          >
                            <Trash2 size={18} />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="p-8 text-center">
            <ShoppingCart size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-bold mb-2">Tidak Ada Pesanan</h3>
            <p className="text-gray-600 dark:text-gray-400">
              {searchQuery || selectedStatus
                ? "Tidak ada pesanan yang sesuai dengan filter"
                : "Belum ada pesanan masuk"}
            </p>
          </div>
        )}
      </div>

      {/* Pagination */}
      {orders.length > 0 && pagination.totalPages > 1 && (
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Menampilkan {((pagination.page - 1) * pagination.limit) + 1} - {Math.min(pagination.page * pagination.limit, pagination.total)} dari {pagination.total} pesanan
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
              disabled={pagination.page <= 1}
              className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Sebelumnya
            </button>
            <span className="px-3 py-2 text-sm bg-primary-600 text-white rounded-md">
              {pagination.page}
            </span>
            <button
              onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
              disabled={pagination.page >= pagination.totalPages}
              className="px-3 py-2 text-sm border border-gray-300 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Selanjutnya
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

// src/app/products/page.tsx
import Link from "next/link";
import Image from "next/image";
import prisma from "@/lib/prisma";
// HAPUS IMPORT NAVBAR
import { Filter, Package, Search } from "lucide-react";

export default async function ProductsPage({
  searchParams,
}: {
  searchParams: { category?: string; search?: string };
}) {
  // Ambil parameter filter
  const categoryId = searchParams.category ? Number(searchParams.category) : undefined;
  const searchQuery = searchParams.search || "";
  
  // Fetch kategori
  const categories = await prisma.category.findMany({
    where: {
      products: {
        some: {},
      },
    },
  });
  
  // Fetch produk dengan filter
  const products = await prisma.product.findMany({
    where: {
      ...(categoryId ? { categoryId } : {}),
      ...(searchQuery
        ? {
            OR: [
              { name: { contains: searchQuery, mode: "insensitive" } },
              { description: { contains: searchQuery, mode: "insensitive" } },
            ],
          }
        : {}),
    },
    include: {
      category: true,
      images: true,
    },
    orderBy: {
      createdAt: "desc",
    },
  });
  
  return (
    <div className="min-h-screen">
      {/* HAPUS <Navbar /> */}
      
      <div className="pt-24 pb-16 bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-3xl font-bold mb-4">Katalog Produk</h1>
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-8">
              Jelajahi berbagai sparepart berkualitas untuk kebutuhan industri dan otomotif Anda
            </p>
            
            {/* Search Form */}
            <div className="max-w-xl mx-auto">
              <form className="relative">
                <input
                  type="text"
                  name="search"
                  defaultValue={searchQuery}
                  placeholder="Cari produk..."
                  className="w-full py-3 pl-12 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <Search className="absolute left-4 top-3.5 text-gray-400" size={20} />
                <button
                  type="submit"
                  className="absolute right-4 top-2.5 bg-blue-600 hover:bg-blue-700 text-white py-1 px-3 rounded text-sm"
                >
                  Cari
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
      
      <div className="py-12">
        <div className="container mx-auto px-4">
          <div className="flex flex-col lg:flex-row gap-8">
            {/* Sidebar */}
            <div className="lg:w-1/4">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 sticky top-24">
                <div className="flex items-center mb-6">
                  <Filter size={20} className="mr-2 text-blue-600 dark:text-blue-400" />
                  <h2 className="text-lg font-bold">Filter</h2>
                </div>
                
                <div>
                  <h3 className="font-medium mb-3">Kategori</h3>
                  <div className="space-y-2">
                    <Link
                      href="/products"
                      className={`block px-3 py-2 rounded-md ${
                        !categoryId
                          ? "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                          : "hover:bg-gray-100 dark:hover:bg-gray-700"
                      }`}
                    >
                      Semua Kategori
                    </Link>
                    {categories.map((category) => (
                      <Link
                        key={category.id}
                        href={`/products?category=${category.id}`}
                        className={`block px-3 py-2 rounded-md ${
                          categoryId === category.id
                            ? "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                            : "hover:bg-gray-100 dark:hover:bg-gray-700"
                        }`}
                      >
                        {category.name}
                      </Link>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Product Grid */}
            <div className="lg:w-3/4">
              {products.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {products.map((product) => (
                    <Link
                      key={product.id}
                      href={`/products/${product.id}`}
                      className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden hover:shadow-md transition"
                    >
                      <div className="h-48 overflow-hidden bg-gray-200 dark:bg-gray-700">
                        {product.images[0] ? (
                          <Image
                            src={product.images[0].url}
                            alt={product.name}
                            width={400}
                            height={300}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <Package size={48} className="text-gray-400" />
                          </div>
                        )}
                      </div>
                      <div className="p-4">
                        <p className="text-sm text-blue-600 dark:text-blue-400 mb-1">
                          {product.category.name}
                        </p>
                        <h3 className="font-medium text-gray-900 dark:text-white mb-1 line-clamp-1">
                          {product.name}
                        </h3>
                        <p className="text-gray-500 dark:text-gray-400 text-sm mb-3 line-clamp-2">
                          {product.description}
                        </p>
                        <p className="text-blue-600 dark:text-blue-400 font-bold">
                          Rp {product.price.toLocaleString("id-ID")}
                        </p>
                      </div>
                    </Link>
                  ))}
                </div>
              ) : (
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center">
                  <Package size={48} className="mx-auto text-gray-400 mb-4" />
                  <h3 className="text-xl font-bold mb-2">Tidak Ada Produk</h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-6">
                    {searchQuery
                      ? `Tidak ada produk yang sesuai dengan pencarian "${searchQuery}"`
                      : "Tidak ada produk yang tersedia untuk kategori ini"}
                  </p>
                  <Link
                    href="/products"
                    className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
                  >
                    Lihat Semua Produk
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// src/app/products/[id]/page.tsx
import Link from "next/link";
import Image from "next/image";
import prisma from "@/lib/prisma";
// HAPUS IMPORT NAVBAR
import AddToCartButton from "@/components/customer/add-to-cart-button";
import { ArrowLeft, Package, ShoppingCart } from "lucide-react";
import { notFound } from "next/navigation";

export default async function ProductDetailPage({
  params,
}: {
  params: { id: string };
}) {
  const productId = Number(params.id);
  
  // Fetch detail produk
  const product = await prisma.product.findUnique({
    where: { id: productId },
    include: {
      category: true,
      images: true,
    },
  });
  
  if (!product) {
    notFound();
  }
  
  // Fetch produk terkait
  const relatedProducts = await prisma.product.findMany({
    where: {
      categoryId: product.categoryId,
      id: { not: productId },
    },
    take: 4,
    include: {
      images: true,
    },
  });
  
  return (
    <div className="min-h-screen">
      {/* HAPUS <Navbar /> */}
      
      <div className="container mx-auto px-4 pt-24 pb-16">
        <Link
          href="/products"
          className="inline-flex items-center text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 mb-6"
        >
          <ArrowLeft size={16} className="mr-1" />
          Kembali ke Katalog
        </Link>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-6">
            {/* Product Image */}
            <div className="bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden">
              {product.images.length > 0 ? (
                <Image
                  src={product.images[0].url}
                  alt={product.name}
                  width={600}
                  height={400}
                  className="w-full h-80 object-contain"
                />
              ) : (
                <div className="w-full h-80 flex items-center justify-center">
                  <Package size={80} className="text-gray-400" />
                </div>
              )}
            </div>
            
            {/* Product Info */}
            <div className="space-y-6">
              <div>
                <p className="text-blue-600 dark:text-blue-400 mb-1">
                  {product.category.name}
                </p>
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                  {product.name}
                </h1>
                <p className="text-2xl font-bold text-blue-600 dark:text-blue-400 mt-2">
                  Rp {product.price.toLocaleString("id-ID")}
                </p>
              </div>
              
              <div className="border-t border-b border-gray-200 dark:border-gray-700 py-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-700 dark:text-gray-300">Status</span>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    product.stock > 0
                      ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                      : "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400"
                  }`}>
                    {product.stock > 0 ? "Tersedia" : "Habis"}
                  </span>
                </div>
                
                {product.stock > 0 && (
                  <div className="flex items-center justify-between mt-2">
                    <span className="text-gray-700 dark:text-gray-300">Stok</span>
                    <span className="font-medium">{product.stock}</span>
                  </div>
                )}
              </div>
              
              <div>
                <h3 className="font-medium text-gray-900 dark:text-white mb-2">
                  Deskripsi
                </h3>
                <div className="prose prose-sm dark:prose-invert">
                  <p className="text-gray-600 dark:text-gray-400">
                    {product.description}
                  </p>
                </div>
              </div>
              
              <div className="pt-4">
                <AddToCartButton
                  productId={product.id}
                  disabled={product.stock <= 0}
                />
              </div>
            </div>
          </div>
        </div>
        
        {/* Related Products */}
        {relatedProducts.length > 0 && (
          <div className="mt-12">
            <h2 className="text-xl font-bold mb-6">Produk Terkait</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {relatedProducts.map((related) => (
                <Link
                  key={related.id}
                  href={`/products/${related.id}`}
                  className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden hover:shadow-md transition"
                >
                  <div className="h-40 bg-gray-200 dark:bg-gray-700">
                    {related.images[0] ? (
                      <Image
                        src={related.images[0].url}
                        alt={related.name}
                        width={300}
                        height={200}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <Package size={32} className="text-gray-400" />
                      </div>
                    )}
                  </div>
                  <div className="p-4">
                    <h3 className="font-medium text-gray-900 dark:text-white mb-1 line-clamp-1">
                      {related.name}
                    </h3>
                    <p className="text-blue-600 dark:text-blue-400 font-bold">
                      Rp {related.price.toLocaleString("id-ID")}
                    </p>
                  </div>
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// src/app/services/page.tsx
import Link from "next/link";
import Image from "next/image";
import prisma from "@/lib/prisma";
import OrderServiceButton from "@/components/customer/order-service-button";
import { Wrench, Clock, Users, Star, Filter, Package, Search } from "lucide-react";

export default async function ServicesPage({
  searchParams,
}: {
  searchParams: { category?: string; search?: string };
}) {
  const categoryId = searchParams.category ? Number(searchParams.category) : undefined;
  const searchQuery = searchParams.search || "";

  // Fetch categories yang memiliki services
  const categories = await prisma.category.findMany({
    where: {
      services: {
        some: {},
      },
    },
  });

  // Fetch services dengan filter
  const services = await prisma.service.findMany({
    where: {
      ...(categoryId ? { categoryId } : {}),
      ...(searchQuery
        ? {
            OR: [
              { name: { contains: searchQuery, mode: "insensitive" } },
              { description: { contains: searchQuery, mode: "insensitive" } },
            ],
          }
        : {}),
    },
    include: {
      category: true,
      images: true,
    },
    orderBy: {
      createdAt: "desc",
    },
  });

  return (
    <div className="min-h-screen">
      {/* Header Section - sama seperti products */}
      <div className="pt-24 pb-16 bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-3xl font-bold mb-4">Layanan Jasa Profesional</h1>
            <p className="text-lg text-gray-600 dark:text-gray-400 mb-8">
              Solusi lengkap untuk kebutuhan machining, fabrikasi, dan maintenance industri Anda
            </p>
            
            {/* Search Form */}
            <div className="max-w-xl mx-auto">
              <form className="relative">
                <input
                  type="text"
                  name="search"
                  defaultValue={searchQuery}
                  placeholder="Cari layanan..."
                  className="w-full py-3 pl-12 pr-4 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <Search className="absolute left-4 top-3.5 text-gray-400" size={20} />
                <button
                  type="submit"
                  className="absolute right-4 top-2.5 bg-blue-600 hover:bg-blue-700 text-white py-1 px-3 rounded text-sm"
                >
                  Cari
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Services Section */}
      <div className="py-12">
        <div className="container mx-auto px-4">
          {/* Stats Section */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
              <Users size={32} className="mx-auto mb-2 text-blue-600 dark:text-blue-400" />
              <h3 className="text-2xl font-bold">500+</h3>
              <p className="text-gray-600 dark:text-gray-400">Customer Puas</p>
            </div>
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
              <Wrench size={32} className="mx-auto mb-2 text-blue-600 dark:text-blue-400" />
              <h3 className="text-2xl font-bold">15+</h3>
              <p className="text-gray-600 dark:text-gray-400">Tahun Pengalaman</p>
            </div>
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
              <Star size={32} className="mx-auto mb-2 text-blue-600 dark:text-blue-400" />
              <h3 className="text-2xl font-bold">4.9/5</h3>
              <p className="text-gray-600 dark:text-gray-400">Rating Customer</p>
            </div>
          </div>

          <div className="flex flex-col lg:flex-row gap-8">
            {/* Sidebar Filter */}
            <div className="lg:w-1/4">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 sticky top-24">
                <div className="flex items-center mb-6">
                  <Filter size={20} className="mr-2 text-blue-600 dark:text-blue-400" />
                  <h2 className="text-lg font-bold">Filter</h2>
                </div>
                
                <div>
                  <h3 className="font-medium mb-3">Kategori</h3>
                  <div className="space-y-2">
                    <Link
                      href="/services"
                      className={`block px-3 py-2 rounded-md transition ${
                        !categoryId
                          ? "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                          : "hover:bg-gray-100 dark:hover:bg-gray-700"
                      }`}
                    >
                      Semua Layanan
                    </Link>
                    {categories.map((category) => (
                      <Link
                        key={category.id}
                        href={`/services?category=${category.id}${searchQuery ? `&search=${searchQuery}` : ""}`}
                        className={`block px-3 py-2 rounded-md transition ${
                          categoryId === category.id
                            ? "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                            : "hover:bg-gray-100 dark:hover:bg-gray-700"
                        }`}
                      >
                        {category.name}
                      </Link>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Services Grid */}
            <div className="lg:w-3/4">
              {services.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  {services.map((service) => (
                    <div
                      key={service.id}
                      className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
                    >
                      {/* Service Image */}
                      <div className="h-48 bg-gray-200 dark:bg-gray-700 overflow-hidden">
                        {service.images[0] ? (
                          <Image
                            src={service.images[0].url}
                            alt={service.name}
                            width={600}
                            height={300}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            <Wrench size={48} className="text-gray-400" />
                          </div>
                        )}
                      </div>

                      {/* Service Content */}
                      <div className="p-6">
                        <div className="flex items-center justify-between mb-3">
                          <span className="px-3 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 text-sm font-medium rounded-full">
                            {service.category.name}
                          </span>
                          <span className="text-lg font-bold text-blue-600 dark:text-blue-400">
                            Rp {service.price.toLocaleString("id-ID")}
                          </span>
                        </div>

                        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-3">
                          {service.name}
                        </h3>

                        <p className="text-gray-600 dark:text-gray-400 mb-6 line-clamp-3">
                          {service.description}
                        </p>

                        {/* CTA Buttons */}
                        <div className="flex gap-3">
                          <Link
                            href={`/services/${service.id}`}
                            className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium text-center transition"
                          >
                            Lihat Detail
                          </Link>
                          <OrderServiceButton
                            serviceId={service.id}
                            serviceName={service.name}
                            className="px-4 py-2 border border-blue-600 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md font-medium transition"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center">
                  <Package size={48} className="mx-auto text-gray-400 mb-4" />
                  <h3 className="text-xl font-bold mb-2">Tidak Ada Layanan</h3>
                  <p className="text-gray-600 dark:text-gray-400 mb-6">
                    {searchQuery
                      ? `Tidak ada layanan yang sesuai dengan pencarian "${searchQuery}"`
                      : "Tidak ada layanan yang tersedia untuk kategori ini"}
                  </p>
                  <Link
                    href="/services"
                    className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition"
                  >
                    Lihat Semua Layanan
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Why Choose Us Section */}
      <div className="py-16 bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-4">Mengapa Memilih Kami?</h2>
            <p className="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
              Pengalaman bertahun-tahun dan komitmen terhadap kualitas membuat kami menjadi pilihan terpercaya
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div className="text-center">
              <div className="bg-blue-100 dark:bg-blue-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Wrench className="text-blue-600 dark:text-blue-400" size={32} />
              </div>
              <h3 className="text-lg font-bold mb-2">Teknologi Modern</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Menggunakan mesin dan teknologi terdepan untuk hasil maksimal
              </p>
            </div>

            <div className="text-center">
              <div className="bg-green-100 dark:bg-green-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Users className="text-green-600 dark:text-green-400" size={32} />
              </div>
              <h3 className="text-lg font-bold mb-2">Tim Berpengalaman</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Operator dan teknisi bersertifikat dengan pengalaman puluhan tahun
              </p>
            </div>

            <div className="text-center">
              <div className="bg-yellow-100 dark:bg-yellow-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Clock className="text-yellow-600 dark:text-yellow-400" size={32} />
              </div>
              <h3 className="text-lg font-bold mb-2">Tepat Waktu</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Komitmen penuh terhadap deadline dan jadwal yang telah disepakati
              </p>
            </div>

            <div className="text-center">
              <div className="bg-red-100 dark:bg-red-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <Star className="text-red-600 dark:text-red-400" size={32} />
              </div>
              <h3 className="text-lg font-bold mb-2">Kualitas Terjamin</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Quality control ketat dan garansi untuk setiap hasil pekerjaan
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <div className="py-16 bg-blue-600 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Siap Memulai Proyek Anda?</h2>
          <p className="text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
            Konsultasikan kebutuhan industri Anda dengan tim ahli kami. Gratis estimasi dan konsultasi teknis.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link
              href="/contact"
              className="px-8 py-3 bg-white text-blue-600 rounded-lg font-medium hover:bg-blue-50 transition"
            >
              Konsultasi Gratis
            </Link>
            <Link
              href="tel:+6281234567890"
              className="px-8 py-3 border border-white text-white rounded-lg font-medium hover:bg-white hover:text-blue-600 transition"
            >
              Hubungi Sekarang
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

// src/app/services/[id]/page.tsx
import Link from "next/link";
import Image from "next/image";
import prisma from "@/lib/prisma";
import OrderServiceButton from "@/components/customer/order-service-button";
import { ArrowLeft, Wrench, Clock, CheckCircle, Star, Phone, Mail } from "lucide-react";
import { notFound } from "next/navigation";

export default async function ServiceDetailPage({
  params,
  searchParams,
}: {
  params: { id: string };
  searchParams: { action?: string };
}) {
  const serviceId = Number(params.id);
  
  // Fetch detail service
  const service = await prisma.service.findUnique({
    where: { id: serviceId },
    include: {
      category: true,
      images: true,
    },
  });
  
  if (!service) {
    notFound();
  }
  
  // Fetch related services
  const relatedServices = await prisma.service.findMany({
    where: {
      categoryId: service.categoryId,
      id: { not: serviceId },
    },
    take: 4,
    include: {
      images: true,
      category: true,
    },
  });

  return (
    <div className="min-h-screen">
      <div className="container mx-auto px-4 pt-24 pb-16">
        <Link
          href="/services"
          className="inline-flex items-center text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 mb-6 transition"
        >
          <ArrowLeft size={16} className="mr-1" />
          Kembali ke Layanan
        </Link>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-8">
            {/* Service Image */}
            <div className="bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden">
              {service.images.length > 0 ? (
                <Image
                  src={service.images[0].url}
                  alt={service.name}
                  width={600}
                  height={400}
                  className="w-full h-80 object-cover"
                />
              ) : (
                <div className="w-full h-80 flex items-center justify-center">
                  <Wrench size={80} className="text-gray-400" />
                </div>
              )}
            </div>
            
            {/* Service Info */}
            <div className="space-y-6">
              <div>
                <span className="px-3 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 text-sm font-medium rounded-full">
                  {service.category.name}
                </span>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white mt-3">
                  {service.name}
                </h1>
                <p className="text-2xl font-bold text-blue-600 dark:text-blue-400 mt-2">
                  Mulai dari Rp {service.price.toLocaleString("id-ID")}
                </p>
              </div>
              
              <div className="border-t border-b border-gray-200 dark:border-gray-700 py-6">
                <h3 className="font-bold text-gray-900 dark:text-white mb-3">
                  Deskripsi Layanan
                </h3>
                <div className="prose prose-gray dark:prose-invert">
                  <p className="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {service.description}
                  </p>
                </div>
              </div>

              {/* Service Features */}
              <div>
                <h3 className="font-bold text-gray-900 dark:text-white mb-4">
                  Keunggulan Layanan
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Kualitas terjamin</span>
                  </div>
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Teknologi modern</span>
                  </div>
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Tim berpengalaman</span>
                  </div>
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Garansi pekerjaan</span>
                  </div>
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Konsultasi gratis</span>
                  </div>
                  <div className="flex items-center">
                    <CheckCircle size={16} className="mr-2 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Tepat waktu</span>
                  </div>
                </div>
              </div>
              
              {/* Action Buttons */}
              <div className="pt-6 space-y-4">
                <OrderServiceButton
                  serviceId={service.id}
                  serviceName={service.name}
                />
                <div className="grid grid-cols-2 gap-3">
                  <a
                    href="tel:+6281234567890"
                    className="flex items-center justify-center py-2 px-4 border border-blue-600 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg font-medium transition"
                  >
                    <Phone size={16} className="mr-2" />
                    Telepon
                  </a>
                  <Link
                    href="/contact"
                    className="flex items-center justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg font-medium transition"
                  >
                    <Mail size={16} className="mr-2" />
                    Email
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Process Flow */}
        <div className="mt-16 bg-white dark:bg-gray-800 rounded-lg shadow p-8">
          <h2 className="text-2xl font-bold text-center mb-8">Alur Proses Layanan</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="text-center">
              <div className="bg-blue-100 dark:bg-blue-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-blue-600 dark:text-blue-400 font-bold text-xl">1</span>
              </div>
              <h3 className="font-bold mb-2">Konsultasi</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Diskusi kebutuhan dan spesifikasi detail dengan tim ahli kami
              </p>
            </div>

            <div className="text-center">
              <div className="bg-blue-100 dark:bg-blue-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-blue-600 dark:text-blue-400 font-bold text-xl">2</span>
              </div>
              <h3 className="font-bold mb-2">Estimasi</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Perhitungan biaya, waktu pengerjaan, dan jadwal yang detail
              </p>
            </div>

            <div className="text-center">
              <div className="bg-blue-100 dark:bg-blue-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-blue-600 dark:text-blue-400 font-bold text-xl">3</span>
              </div>
              <h3 className="font-bold mb-2">Pengerjaan</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Proses produksi dengan monitoring ketat dan update berkala
              </p>
            </div>

            <div className="text-center">
              <div className="bg-blue-100 dark:bg-blue-900/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-blue-600 dark:text-blue-400 font-bold text-xl">4</span>
              </div>
              <h3 className="font-bold mb-2">Delivery</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Quality check final dan pengiriman sesuai jadwal yang disepakati
              </p>
            </div>
          </div>
        </div>

        {/* FAQ Section */}
        <div className="mt-16 bg-gray-50 dark:bg-gray-900 rounded-lg p-8">
          <h2 className="text-2xl font-bold text-center mb-8">Pertanyaan Umum</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-bold mb-2">Berapa lama waktu pengerjaan?</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Waktu pengerjaan bervariasi tergantung kompleksitas proyek. Kami akan memberikan estimasi yang akurat setelah konsultasi.
              </p>
            </div>

            <div>
              <h3 className="font-bold mb-2">Apakah ada garansi untuk hasil pekerjaan?</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Ya, kami memberikan garansi untuk setiap hasil pekerjaan sesuai dengan standar kualitas yang telah ditetapkan.
              </p>
            </div>

            <div>
              <h3 className="font-bold mb-2">Bagaimana sistem pembayaran?</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Kami menerima pembayaran bertahap (DP dan pelunasan) dengan berbagai metode pembayaran yang fleksibel.
              </p>
            </div>

            <div>
              <h3 className="font-bold mb-2">Apakah bisa custom sesuai kebutuhan?</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                Tentu saja! Kami spesialis dalam mengerjakan proyek custom sesuai dengan spesifikasi dan kebutuhan khusus Anda.
              </p>
            </div>
          </div>
        </div>
        
        {/* Related Services */}
        {relatedServices.length > 0 && (
          <div className="mt-16">
            <h2 className="text-2xl font-bold mb-8">Layanan Terkait</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {relatedServices.map((related) => (
                <Link
                  key={related.id}
                  href={`/services/${related.id}`}
                  className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden hover:shadow-md transition"
                >
                  <div className="h-40 bg-gray-200 dark:bg-gray-700">
                    {related.images[0] ? (
                      <Image
                        src={related.images[0].url}
                        alt={related.name}
                        width={300}
                        height={200}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <Wrench size={32} className="text-gray-400" />
                      </div>
                    )}
                  </div>
                  <div className="p-4">
                    <span className="text-xs text-blue-600 dark:text-blue-400 font-medium">
                      {related.category.name}
                    </span>
                    <h3 className="font-medium text-gray-900 dark:text-white mb-1 line-clamp-1">
                      {related.name}
                    </h3>
                    <p className="text-blue-600 dark:text-blue-400 font-bold text-sm">
                      Mulai Rp {related.price.toLocaleString("id-ID")}
                    </p>
                  </div>
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}