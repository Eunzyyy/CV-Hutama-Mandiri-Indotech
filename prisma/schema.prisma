// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"  // ‚Üê TAMBAHKAN INI UNTUK RAILWAY
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  phone         String?
  phoneNumber   String?
  address       String?
  password      String
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  notifications    Notification[]
  verifiedPayments Payment[] @relation(name: "PaymentVerifier")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ADMIN
  OWNER
  FINANCE
  CUSTOMER
}

enum CategoryType {
  PRODUCT
  SERVICE
}

model Category {
  id          Int          @id @default(autoincrement())
  publicId    String       @unique @default(cuid())
  name        String
  description String?
  type        CategoryType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  products Product[]
  services Service[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  sku         String?
  weight      Float?
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category       @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Service {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(cuid())
  name        String
  description String
  price       Float
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category       @relation(fields: [categoryId], references: [id])
  images     ServiceImage[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("services")
}

model ServiceImage {
  id        Int     @id @default(autoincrement())
  url       String
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_images")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  E_WALLET
  COD
}

enum PaymentStatus {
  PENDING
  PENDING_VERIFICATION
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  userId          Int
  totalAmount     Float
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod?
  shippingAddress String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int?
  serviceId Int?
  quantity  Int
  price     Float

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?       // ID dari payment gateway
  paymentProof    String?       // URL bukti pembayaran
  proofFileName   String?       // Nama file bukti pembayaran
  notes           String?
  paidAt          DateTime?
  verifiedAt      DateTime?     // Tanggal verifikasi admin
  verifiedBy      Int?          // User ID yang verifikasi
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  verifier User? @relation(name: "PaymentVerifier", fields: [verifiedBy], references: [id])

  @@map("payments")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  serviceId Int?
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_CONFIRMED
  REVIEW_ADDED
  USER_REGISTERED
  SYSTEM_ALERT
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int?             // null = untuk semua admin
  type      NotificationType
  title     String
  message   String
  data      Json?            // data tambahan (orderId, etc)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}